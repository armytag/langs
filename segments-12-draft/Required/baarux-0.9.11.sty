%%
%% This is file `baarux.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% baarux.dtx  (with options: `package')
%% 
%% Copyright 2020, 2021 Akam Chinjir
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%% http://www.latex-project.org/lppl.txt
%% and version 1.3 or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%% 
%% This work has the LPPL maintenance status `maintained'.
%% 
%% The Current Maintainer of this work is Akam Chinjir.
%% 
%% This work consists of the files  baarux.tex and
%%                                  baarux.sty.in
%% and the derived files            baarux.dtx,
%%                                  baarux.pdf, and
%%                                  baarux.sty
%% 
\ProvidesPackage{baarux}[2021/10/19 v0.9.11 linguistics-style examples]
\NeedsTeXFormat{LaTeX2e}[1995/12/01]
\RequirePackage{etoolbox,trimspaces}
\let\baarucolon@c=:
\def\baarucolon@m{:}
\edef\baarurestorecatcodes{%
  \catcode`\noexpand\:=\the\catcode`\:
  \catcode`\noexpand\_=\the\catcode`\_
}
\AtEndOfPackage{\baarurestorecatcodes}
\catcode`\:=11
\catcode`\_=11
\def\BaaruError#1#2{%
  \let\protect\relax
  \baaru:if_in_cells{%
    \PackageError{baarux}{#1\MessageBreak (on \expandafter\string\csname
      \baaru:cur_line\endcsname\space line, column \the\numexpr\baaru:curX+1)}{#2}%
  }{%
    \PackageError{baarux}{#1}{#2}%
  }%
}
\begingroup
\catcode`\%=4
\catcode`\#=4
\@firstofone{
  \endgroup
  \def\:delim{#}
  \let\:baaru:=%
}
\let\baaruendscan\:delim
\def\baalph#1{%
  \ifcase #1%
  a\or b\or c\or d\or e\or f\or g\or h\or i\or j\or k\or l\or m\or n\or o\or
  p\or q\or r\or s\or t\or u\or v\or w\or x\or y\or z%
  \else
    \BaaruError{That's too many lines in one nlevel type!}\@ehc
  \fi
}
\def\baaru:fn_patching_failed{%
  \PackageWarning{baarux}{Patching footnotes failed.\MessageBreak Footnote
    detection will not work}%
}
\apptocmd\@footnotetext{\let\baaru:if_in_footnote\@secondoftwo}{%
  \pretocmd\@footnotetext{\let\baaru:if_in_footnote\@firstoftwo}{}{\baaru:fn_patching_failed}%
}{%
  \baaru:fn_patching_failed
}%
\def\baaru:foreach#1#2{%
  \baaru:foreach@#1#2,\baaru:listend,\:delim
}
\def\baaru:foreach@#1#2,{%
  \ifx\baaru:listend#2%
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
  {%
    \baaru:listend
  }{%
    \expandafter\baaru:foritem\expandafter#1\@firstofone#2&&\:delim%
    \baaru:foreach@#1%
  }%
}
\def\baaru:listend#1\:delim{}
\def\baaru:foritem#1#2&#3\:delim{%
  #1{#2}%
}
\def\baaru:append#1#2{%
  \expandafter\def\expandafter#1\expandafter{#1#2}%
}
\def\baaru:csappend#1{%
  \expandafter\baaru:append\csname #1\endcsname
}%
\newcount\baaru:counta
\newcount\baaru:countb
\newcount\baaru:countc
\newcount\baaru:exdepth
\newcount\baaru:curX
\newcount\baaru:nextX
\newcount\baaru:lastX
\newcount\baaru:cached_curX
\newcount\baaru:cached_endlinechar
\newcount\baaru:baseX
\newcount\baaru:curY
\newcount\baaru:curNlevelY
\newcount\baaru:lastNlevelY
\newcount\baaru:baseY
\newcount\baaru:nrows
\newcount\baaru:n_col_data
\newcount\baaru:n_multicols
\newcount\baaru:multicol_span
\newcount\baaru:n_regular_cols % for skipping unglossed cols
\newcount\baaru:blockno
\newcount\baaru:autoidx
\newcount\baaru:contouridx
\newcount\baaru:chapterno
\newcount\baaru:ncols\baaru:ncols\@ne
\newcount\baaru:colno
\newtoks\baaru:buffer
\newtoks\baaru:cache
\newdimen\baaru:width
\newdimen\baaru:cur_label_wd
\newdimen\baaru:linewidth
\newdimen\baaru:remaining_width
\newdimen\baaru:cached_width
\newdimen\baaru:column_width
\newdimen\baaru:sidepanel_width
\newdimen\baaru:prevdepth
\newdimen\baaru:indent
\newdimen\baaru:leftmargin
\newdimen\baaru:cellwidth
\newdimen\baaru:cellskip
\newdimen\baaru:natwd
\newdimen\baaru:gaps_total
\newdimen\baaru:cols_total
\newdimen\baaru:max_delta_gaps
\newdimen\baaru:max_delta_cols
\newdimen\baaru:max_delta
\newdimen\baaru:target_delta
\newdimen\baaru:target_delta_gaps
\newdimen\baaru:target_delta_cols
\newskip\baaru:parskip
\let\baaru:if\@secondoftwo
\let\baaru:if_starred\@secondoftwo
\let\baaru:if_suppress_labels\@secondoftwo
\let\baaru:if_in_columns\@secondoftwo
\let\baaru:if_preempt_newline\@secondoftwo
\let\baaru:if_in_footnote\@secondoftwo
\let\baaru:if_in_ex\@secondoftwo
\let\baaru:if_scanning\@secondoftwo
\let\baaru:if_was_scanning\@secondoftwo
\let\baaru:if_in_gloss\@secondoftwo
\let\baaru:if_in_cells\@secondoftwo
\let\baaru:if_in_nlevel\@secondoftwo
\let\baaru:if_has_suffix\@secondoftwo
\let\baaru:if_prefix_row\@secondoftwo
\let\baaru:if_skip_to_next_col\@secondoftwo
\ifdef\c@chapter{%
  \let\baaru:if_has_chapters\@firstoftwo
  \@ifclassloaded{memoir}{%
    \ifartopt\let\baaru:if_has_chapters\@secondoftwo\fi
  }{}%
}{%
  \let\baaru:if_has_chapters\@secondoftwo
}
\@ifpackageloaded{leipzig}{%
  \ifdef\Compl{%
    \let\baaru:if_leipzig\@firstoftwo
  }{%
    \let\baaru:if_leipzig\@secondoftwo
  }
}{%
  \let\baaru:if_leipzig\@secondoftwo
}%
\def\newbaaruscanstate#1#2#3#4{%
  \csdef{baaru:scan_state::#1}{#1}%
  \csdef{baaru:scan_state::#1@type}{#2}%
  \cslet{baaru:scan_state::#1@if_need_predelim}{#3}%
  \cslet{baaru:scan_state::#1@if_need_postdelim}{#4}%
}
\newbaaruscanstate{empty}{0}{\@secondoftwo}{\@secondoftwo}
\newbaaruscanstate{plain}{1}{\@firstoftwo}{\@firstoftwo}
\newbaaruscanstate{prefix}{2}{\@firstoftwo}{\@firstoftwo}
\newbaaruscanstate{nogloss}{3}{\@firstoftwo}{\@firstoftwo}
\newbaaruscanstate{openbracket}{3}{\@firstoftwo}{\@secondoftwo}
\newbaaruscanstate{closebracket}{3}{\@secondoftwo}{\@firstoftwo}
\def\baaru:ss:if_juncture_needs_postdelim{\baaru:if_buffered_space}
\newbaaruscanstate{juncture}{3}{\@secondoftwo}{\baaru:ss:if_juncture_needs_postdelim}
\newbaaruscanstate{delim}{3}{\@secondoftwo}{\@secondoftwo}
\def\baaru:if_buffer_empty{%
  \ifx\baaru:scan_state\baaru:scan_state::empty
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
\def\baaru:if_scan_state#1#2{%
  \ifx#1#2%
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
\def\baaru:if_is_unglossed#1{%
  \ifnum\csname baaru:scan_state::#1@type\endcsname=3\relax
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
\def\baaru:if_is_text#1{%
  \baaru:if_scan_state#1\baaru:scan_state::plain{%
    \@firstoftwo
  }{%
    \baaru:if_scan_state#1\baaru:scan_state::prefix{%
      \@firstoftwo
    }{%
      \@secondoftwo % unglossed or empty
    }%
  }%
}
\let\baaru:hyperref:if_fix_height\@secondoftwo
\let\baaru:auto_content\@empty
\let\baaru:auto_styles\@empty
\let\baaru:if_meta\@firstoftwo
\let\baaru:if_alttr\@firstoftwo
\let\baaru:if_glosscmds\@firstoftwo
\let\baaru:if_junctures\@firstoftwo
\let\baaru:if_extra_glosscmds\@secondoftwo
\let\baaru:if_contours\@secondoftwo
\let\baaru:if_columns\@secondoftwo
\let\baaru:if_abbrevs\@firstoftwo
\let\baaru:if_stdabbrevs\@firstoftwo
\let\baaru:if_reset_for_chapters\baaru:if_has_chapters
\let\baaru:if_use_chapter_labels\baaru:if_has_chapters
\let\baaru:if_pars\@firstoftwo
\let\baaru:if_smart_labels\@firstoftwo
\let\baaru:if_ijal\@secondoftwo
\DeclareOption{aligned}{\listadd\baaru:auto_styles{aligned}}
\DeclareOption{2level}{\listadd\baaru:auto_styles{2level}}
\DeclareOption{3level}{\listadd\baaru:auto_styles{3level}}
\DeclareOption{meta}{\let\baaru:if_meta\@firstoftwo}
\DeclareOption{nometa}{\let\baaru:if_meta\@secondoftwo}
\DeclareOption{alttr}{\let\baaru:if_alttr\@firstoftwo}
\DeclareOption{noalttr}{\let\baaru:if_alttr\@secondoftwo}
\DeclareOption{glosscmds}{\let\baaru:if_glosscmds\@firstoftwo\let\baaru:if_extra_glosscmds\@secondoftwo}
\DeclareOption{nojunctures}{\let\baaru:if_junctures\@secondoftwo}
\DeclareOption{noglosscmds}{\let\baaru:if_glosscmds\@secondoftwo\let\baaru:if_extra_glosscmds\@secondoftwo}
\DeclareOption{extraglosscmds}{\let\baaru:if_glosscmds\@firstoftwo\let\baaru:if_extra_glosscmds\@firstoftwo}
\DeclareOption{contours}{\let\baaru:if_contours\@firstoftwo}
\DeclareOption{nocontours}{\let\baaru:if_contours\@secondoftwo}
\DeclareOption{columns}{\let\baaru:if_columns\@firstoftwo}
\DeclareOption{nocolumns}{\let\baaru:if_columns\@secondoftwo}
\DeclareOption{maximal}{%
  \ExecuteOptions{%
    extraglosscmds,contours,columns%
  }%
}%
\DeclareOption{minimal}{%
  \ExecuteOptions{%
    nometa,noalttr,noglosscmds%
  }%
}
\DeclareOption{canonical}{%
  \let\baaru:auto_styles\@empty
  \ExecuteOptions{maximal,aligned}
}
\DeclareOption{noabbrevs}{\let\baaru:if_abbrevs\@secondoftwo}
\DeclareOption{nostdabbrevs}{\let\baaru:if_stdabbrevs\@secondoftwo}
\DeclareOption{leipzig}{\let\baaru:if_leipzig\@firstoftwo}
\DeclareOption{noleipzig}{\let\baaru:if_leipzig\@secondoftwo}
\DeclareOption{nochapterreset}{\let\baaru:if_reset_for_chapters\@secondoftwo}
\DeclareOption{nochapterlabels}{\let\baaru:if_use_chapter_labels\@secondoftwo}
\DeclareOption{nochapters}{\let\baaru:if_reset_for_chapters\@secondoftwo\let\baaru:if_use_chapter_labels\@secondoftwo}
\DeclareOption{ijal}{\AtEndOfPackage{\baaruijal}}
\DeclareOption{nopars}{\let\baaru:if_pars\@secondoftwo}
\ProcessOptions*
\protected\def\baaruset{%
  \let\do\baaru:set_one
  \docsvlist
}
\def\baaru:set_one#1{%
  \edef\@tempa{\trim@spaces@noexp{#1}}%
  \expandafter\baaru:set_one@\@tempa=\:delim
}
\def\baaru:set_one@#1=#2\:delim{%
  \ifblank{#2}{%
    \baaru:set_one@@@{#1}%
  }{%
    \baaru:set_one@@{#1}#2%
  }%
}
\def\baaru:set_one@@#1#2={%
  \ifcsdef{::baaru:set::#1}{%
    \csname ::baaru:set::#1\endcsname{#2}%
  }{%
    \ifcsdef{::baaru::#1}{%
      \csdef{::baaru::#1}{#2}%
    }{%
      \BaaruError{I don't know how to set `#1'}\@eha
    }%
  }%
}%
\def\baaru:set_one@@@#1{%
  \ifcsdef{::baaru:sw::#1}{%
    \csname ::baaru:sw::#1\endcsname
  }{%
    \BaaruError{I don't know how to set `#1'}\@eha
  }%
}
\def\baarudef#1{%
  \ifcsdef{::baaru:set::#1}{%
    \baaru:def@set{#1}%
  }{%
    \ifcsdef{::baaru::#1}{%
      \expandafter\def\csname ::baaru::#1\endcsname
    }{%
      \BaaruError{I don't know how to define `#1'}\@eha
    }%
  }%
}
\def\baaru:def@set#1#2{%
  \csname ::baaru:set::#1\endcsname{#2}%
}
\def\::baaru:set::code#1{#1}
\def\baaruuse#1{%
  \ifcsdef{::baaru::if_#1}{%
    \csname ::baaru::if_#1\endcsname
  }{%
    \ifcsdef{::baaru::#1}{%
      \csname ::baaru::#1\endcsname
    }{%
      \BaaruError{I don't know how to use `#1'}\@eha
    }%
  }%
}
\def\newbaaruparam#1#2{%
  \csdef{::baaru::#1}{#2}%
}
\def\newbaarubool{%
  \@ifstar\newbaarubool@full\newbaarubool@simple
}
\def\newbaarubool@simple#1#2{%
  \expandafter\newbaarubool@simple@\csname ::baaru::if_#1\endcsname{#1}#2
}
\def\newbaarubool@simple@#1#2#3{%
  \newbaarubool@full{#2}{\let#1\@firstoftwo}{\let#1\@secondoftwo}%
  \let#1#3%
}
\def\newbaarubool@full#1#2#3{%
  \csdef{baaru#1}{#2}%
  \csdef{nobaaru#1}{#3}%
  \csletcs{::baaru:sw::#1}{baaru#1}%
  \csletcs{::baaru:sw::no#1}{nobaaru#1}%
}
\def\newbaaruhook#1#2{%
  \ifblank{#2}{%
    \csedef{baaru:add_hook::#1}##1{%
      \noexpand\ifdef\expandafter\noexpand\csname baaru:hook::#1\endcsname{%
        \noexpand\baaru:append\expandafter\noexpand\csname baaru:hook::#1\endcsname{##1}%
      }{%
        \def\expandafter\noexpand\csname baaru:hook::#1\endcsname{##1}%
      }%
    }%
    \csedef{baaru:use_hook::#1}{%
      \noexpand\ifdef\expandafter\noexpand\csname baaru:hook::#1\endcsname{%
        \expandafter\noexpand\csname baaru:hook::#1\endcsname
      }{}%
    }%
    \csedef{baaru:remove_hook::#1}##1{%
      \noexpand\ifdef\expandafter\noexpand\csname baaru:hook::#1\endcsname{%
        \noexpand\baaru:remove_hook\expandafter\noexpand \csname baaru:hook::#1\endcsname{##1}%
      }{%
        \noexpand\BaaruError{The `#1' hook has not been set}\@eha
      }%
    }%
    \csundef{baaru:hook::#1}%
  }{%
    \csdef{baaru:add_hook::#1}##1{%
      \ifcsdef{baaru:hook::#1#2}{%
        \baaru:csappend{baaru:hook::#1#2}{##1}%
      }{%
        \csdef{baaru:hook::#1#2}{##1}%
      }%
    }%
    \csdef{baaru:use_hook::#1}{%
      \ifcsdef{baaru:hook::#1#2}{%
        \csname baaru:hook::#1#2\endcsname
      }{}%
    }%
    \csdef{baaru:remove_hook::#1}##1{%
      \ifcsdef{baaru:hook::#1#2}{%
        \expandafter\baaru:remove_hook\csname baaru:hook::#1#2\endcsname{##1}%
      }{%
        \BaaruError{The `#1' hook has not been set}\@eha
      }%
    }%
  }%
}
\newbaaruhook{everyexesi}{@\baaru:cur_style}
\newbaaruhook{everyfnexesi}{@\baaru:cur_style}
\newbaaruhook{everyexesii}{@\baaru:cur_style}
\newbaaruhook{everyexesiii}{@\baaru:cur_style}
\newbaaruhook{everyexesiv}{@\baaru:cur_style}
\newbaaruhook{everyex}{@\baaru:cur_style}
\newbaaruhook{everyscan}{@\baaru:cur_style}
\newbaaruhook{everygloss}{@\baaru:cur_style}
\newbaaruhook{glossloaded}{}
\newbaaruhook{glossoutput}{}
\newbaaruhook{lineoutput}{@\the\baaru:curY}
\def\addbaaruhook#1#2{%
  \ifcsdef{baaru:add_hook::#1}{%
    \csname baaru:add_hook::#1\endcsname{#2}%
  }{%
    \BaaruError{Unknown hook `#1'}\@eha
  }%
}
\def\removebaaruhook#1#2{%
  \ifcsdef{baaru:remove_hook::#1}{%
    \csname baaru:remove_hook::#1\endcsname{#2}%
  }{%
    \BaaruError{Unknown hook `#1'}\@eha
  }%
}
\def\baaru:remove_hook#1#2{%
  \def\:kill##1#2##2\:delim##3\::delim{%
    \ifblank{##3}{}{%
      \def#1{##1##2}%
    }%
  }%
  \expandafter\:kill#1\:delim#2\:delim\::delim
}
\def\usebaaruhook#1{%
  \ifcsdef{baaru:use_hook::#1}{%
    \csname baaru:use_hook::#1\endcsname
  }{%
    \BaaruError{Unknown hook `#1'}\@eha
  }%
}
\def\::baaru:set::labelwidthexesi#1{\def\::baaru::labelwidthexesi{#1}\let\baaru:manual_labelwidthexesi\relax}
\def\::baaru::labelwidthfnexesi{2em}
\def\::baaru::labelwidthexesii{1.2em}
\def\::baaru::labelwidthexesiii{1.37em}
\def\::baaru::labelwidthexesiv{1.2em}
\def\setbaarulabelwidth#1{%
  \ifnum\baaru:exdepth=\z@
    \baaru:if_in_footnote{%
      \def::baaru::labelwidthfnexesi{#1}%
    }{%
      \::baaru:set::labelwidthexesi{#1}%
    }%
  \else
    \ifcsdef{::baaru:set::labelwidth\baaru:excounter}{%
      \csname ::baaru:set::labelwidth\baaru:excounter\endcsname{#1}%
    }{%
      \csdef{::baaru::labelwidth\baaru:excounter}{#1}%
    }%
  \fi
}
\def\::baaru:set::labelwidth#1{%
  \setbaarulabelwidth{#1}%
}
\def\baaru:set_max_label#1#2#3{%
  \setbox\z@\hbox{%
    \csname ::baaru::label#2\endcsname{%
      #3%
    }%
  }%
  #1\csedef{::baaru::labelwidth#2}{\the\wd\z@}%
}
\def\::baaru:set::maxlabelexesi#1{\baaru:set_max_label\relax{exesi}{#1}\let\baaru:manual_labelwidthexesi\relax}
\def\::baaru:set::maxlabelfnexesi#1{\baaru:set_max_label\relax{fnexesi}{#1}}
\def\::baaru:set::maxlabelexesii#1{\baaru:set_max_label\relax{exesii}{#1}}
\def\::baaru:set::maxlabelexesiii#1{\baaru:set_max_label\relax{exesiii}{#1}}
\def\::baaru:set::maxlabelexesiv#1{\baaru:set_max_label\relax{exesiiv}{#1}}
\def\setbaarumaxlabel#1{%
  \ifnum\baaru:exdepth=\z@
    \baaru:if_in_footnote{%
      \::baaru:set::maxlabelfnexesi{#1}%
    }{%
      \::baaru:set::maxlabelexesi{#1}%
    }%
  \else
    \csname ::baaru:set::maxlabel\baaru:excounter\endcsname{#1}%
  \fi
}
\def\::baaru:set::maxlabel#1{%
  \setbaaarumaxlabel{#1}%
}
\def\baaru:maybe_init_labelwidth{%
  \let\baaru:if\@secondoftwo
  \ifdef\::baaru::labelwidthexesi{%
    \ifdef\baaru:manual_labelwidthexesi{}{%
      \baaru:if_use_chapter_labels{%
        \ifnum\c@exesi=\z@
          \ifnum\baaru:chapterno=\c@chapter\else
            \let\baaru:if\@firstoftwo
          \fi
        \fi
      }{}%
    }%
  }{%
    \let\baaru:if\@firstoftwo
  }%
  \baaru:if{%
    \baaru:init_labelwidth{88}%
  }{%
    \ifnum\c@exesi=99 % called before the counter gets incremented
      \baaru:init_labelwidth{888}%
    \fi
  }%
}%
\def\baaru:init_labelwidth#1{%
  \baaru:counta\c@exesi
  \c@exesi#1\relax
  \edef\@tempa{%
    \theexesi
    \baaru:if_ijal{m}{}%
  }%
  \c@exesi\baaru:counta
  \baaru:set_max_label\global{exesi}{\@tempa$'$}%
}
\def\::baaru::judgmentpresep{0.3em}
\def\::baaru::judgmentpostsep{0.08333em}
\def\::baaru::labelsep{1em}
\def\setbaarulabelsep#1{%
  \ifnum\baaru:exdepth=\z@
    \def\::baaru::labelsep{#1}%
  \else
    \labelsep#1\relax
  \fi
}
\def\::baaru:set::labelsep#1{%
  \setbaarulabelsep{#1}%
}
\def\setbaarumaxjudgment#1{%
  \setbox\z@\hbox{#1}%
  \@tempdima\wd\z@
  \advance\@tempdima\::baaru::judgmentpresep
  \advance\@tempdima\::baaru::judgmentpostsep
  \ifdim\@tempdima>\::baaru::labelsep\relax
    \edef\::baaru::labelsep{%
      \the\@tempdima
    }%
    \ifnum\baaru:exdepth=\z@\else
      \advance\@tempdima-\labelsep
      \labelsep\::baaru::labelsep
      \advance\leftmargin\@tempdima
      \advance\linewidth-\@tempdima
      \baaru:linewidth\linewidth
      \advance\@totalleftmargin\@tempdima
      \parshape\@ne\@totalleftmargin\baaru:linewidth
    \fi
  \fi
}
\def\::baaru:set::maxjudgment#1{\setbaarumaxjudgment{#1}}%
\newbaarubool*{flushleft}{%
  \let\baaru:if_suppress_labels\@firstoftwo
  \setbaarulabelwidth{0pt}%
  \setbaarulabelsep{0pt}%
  \def\::baaru::glossindent{\z@}%
  \def\::baaru::hangindent{\z@}%
}{
  \let\baaru:if_suppress_labels\@secondoftwo
}
\def\::baaru::makelabel#1{%
  #1\hfil
}
\def\::baaru::labelfnexesi#1{(#1)}
\def\::baaru::labelexesi#1{(#1)}
\def\::baaru::labelexesii#1{#1.}
\def\::baaru::labelexesiii#1{#1.}
\def\::baaru::labelexesiv#1{#1.}
\def\baaruijal{%
  \baaru:if_ijal{}{%
    \def\::baaru::partopsep{\z@ \@plus 0.1\::baaru::lineskip}%
    \let\::baaru::topsepi\::baaru::itemsepi
    \let\::baaru::topsepii\::baaru::itemsepii
    \ifnum\baaru:exdepth=\z@\else
      \partopsep\::baaru::partopsep
      \topsep\itemsep
    \fi
    \def\::baaru::labelexesii##1{%
      \::baaru::labelexesi{\p@exesii##1}%
    }%
    \def\::baaru::labelexesiii##1{%
      \::baaru::labelexesi{\p@exesiii##1}%
    }%
    \def\::baaru::labelexesiv##1{%
      \::baaru::labelexesi{\p@exesiv##1}%
    }%
    \ifdef\::baaru::labelwidthexesi{%
      \@tempdima\::baaru::labelwidthexesi\relax
      \sbox\z@{m}%
      \advance\@tempdima\wd\z@
      \edef\::baaru::labelwidthexesi{\the\@tempdima}%
    }{}%
    \let\baaru:if_ijal\@firstoftwo
  }%
}%
\let\::baaru:sw::ijal\baaruijal
\def\::baaru:set::partopsep#1{\partopsep#1\relax}
\def\::baaru:set::topsep#1{\topsep#1\relax}
\def\::baaru:set::itemsep#1{\itemsep#1\relax}
\def\::baaru:set::parsep#1{\parsep#1\relax}
\def\::baaru:set::rightmargin#1{\rightmargin#1\relax}
\def\::baaru:set::listparindent#1{\listparindent#1\relax}
\def\::baaru:set::itemindent#1{\itemindent#1\relax}
\def\::baaru::lineskip{\baselineskip}
\def\::baaru::partopsep{0.2\::baaru::lineskip \@plus 0.1\::baaru::lineskip \@minus 0.1\::baaru::lineskip}%
\def\::baaru::topsepi{0.6667\::baaru::lineskip \@plus 0.3333\::baaru::lineskip \@minus 0.2\::baaru::lineskip}%
\def\::baaru::parsepi{0.3333\::baaru::lineskip \@plus 0.1667\::baaru::lineskip \@minus 0.1\::baaru::lineskip}%
\let\::baaru::itemsepi\::baaru::parsepi
\let\::baaru::topsepii\::baaru::parsepi
\let\::baaru::parsepii\::baaru::parsepi
\let\::baaru::itemsepii\::baaru::parsepii
\let\::baaru::optarg\baarucolon@c
\let\baaru:optarg\baarucolon@m

\def\::baaru:set::optarg#1{%
  \let\::baaru::optarg=#1%
  \def\baaru:optarg{#1}%
}

\def\baaru:if_optarg#1#2{%
  \def\reserved@a{#1}%
  \def\reserved@b{#2}%
  \futurelet\:token\baaru:if_optarg@
}

\def\baaru:if_optarg@{%
  \ifx\:token\::baaru::optarg
    \expandafter\baaru:if_optarg@@
  \else
    \expandafter\reserved@b
  \fi
}
\def\baaru:if_optarg@@#1#2{%
  \reserved@a{#2}%
}
\def\::baaru::colspacing{1em}%
\def\::baaru::cellspacing{1em}%
\def\::baaru::commentoverhang{\z@}%
\def\::baaru::commentsep{1.5em}%
\def\::baaru::citeoverhang{0pt}
\def\::baaru::citesep{1.5em}
\def\::baaru::sidepaneloverhang{0pt}
\def\::baaru::sidepanelsep{1.5em}
\def\::baaru::sidepanelflex{0pt plus 1ex}%
\def\::baaru::sidepanelratio{0.30}
\def\::baaru::glossindent{\z@}
\def\::baaru::hangindent{2em}
\def\::baaru::strikeht{0.55ex}
\def\::baaru::uldp{0.65ex}
\def\::baaru::linewd{0.1ex}
\def\::baaru::bracketsep{0.33333em}
\def\::baaru::junctureinnersep{0.16667em}
\def\::baaru::junctureoutersep{0.66667em}
\def\::baaru::delimsep{0.66667em}
\def\::baaru:set::rightoverhang#1{%
  \def\::baaru::commentoverhang{#1}%
  \def\::baaru::citeoverhang{#1}%
  \def\::baaru::sidepaneloverhang{#1}%
}
\def\::baaru:set::rightsep#1{%
  \def\::baaru::commentsep{#1}%
  \def\::baaru::citesep{#1}%
  \def\::baaru::sidepanelsep{#1}%
}
\def\::baaru::preamblepar{%
  \csname baaru:preamblepar@\baaru:cur_style\endcsname
}
\def\::baaru:set::preamblepar#1{%
  \csdef{baaru:preamblepar@\baaru:cur_style}{#1}%
}%
\def\::baaru::glosspar{%
  \csname baaru:glosspar@\baaru:cur_style\endcsname
}
\def\::baaru:set::glosspar#1{%
  \csdef{baaru:glosspar@\baaru:cur_style}{#1}%
}%
\newbaarubool{pars}\baaru:if_pars
\newbaarubool{explicitcells}\@secondoftwo
\newbaarubool{cumulativehang}\@secondoftwo
\newbaarubool{rightjustify}\@firstoftwo
\def\::baaru::colgapshrink{25}%
\def\::baaru::colgapstretch{25}%
\def\::baaru::colstretch{25}%
\def\::baaru::bracket#1#2{%
  \::baaru::bracketstyle{#1}%
  \ifblank{#2}{}{%
    \::baaru::bracketsub{#2}%
  }%
}
\let\::baaru::judgmentstyle\relax
\def\::baaru::pointprefix{Pt}
\let\::baaru::box\framebox
\let\::baaru::strikeoutstyle\relax
\let\::baaru::ulstyle\relax
\def\::baaru::emptyelementstyle#1{\textit{#1}}%
\def\::baaru::emptyelementsub#1{\textsubscript{#1}}
\newbaarubool{copybrackets}\@secondoftwo
\def\::baaru::bracketstyle#1{{\normalfont #1}}%
\def\::baaru::bracketsub#1{\textsubscript{#1}}
\def\::baaru::openbracket{\::baaru::bracket}
\def\::baaru::closebracket{\::baaru::bracket}
\newbaarubool{copyjunctures}\@secondoftwo
\newbaarubool{justifyforjuncture}\@firstoftwo
\def\::baaru::juncture#1{%
  {\normalfont #1}%
}
\newbaarubool{copydelims}\@secondoftwo
\def\::baaru::delim#1{%
  {\normalfont #1}%
}
\def\baaruplainspacing{%
  \def\::baaru::cellspacing{\fontdimen2\font}%
}
\let\::baaru:sw::plainspacing\baaruplainspacing
\def\mkbaaruprefixline#1{%
  \addbaaruhook{every#1line}{\baaru:make_row_prefix}%
}
\def\baaru:make_row_prefix{%
  \ifnum\baaru:curY=\z@
    \let\baaru:if_prefix_row\@firstoftwo
  \fi
}
\def\killbaaruprefixline#1{%
  \removebaaruhook{every#1line}{\baaru:make_row_prefix}%
}
\def\::baaru:set::prefixline#1{%
  \mkbaaruprefixline{#1}%
}
\def\enablebaaruabbrevs#1{%
  \addbaaruhook{every#1line}{\baaru:enable_abbrevs_on_this_row}%
}
\def\baaru:enable_abbrevs_on_this_row{%
  \edef\:next{%
    \noexpand\addbaaruhook{glossloaded}{\noexpand\baaru:parse_abbrevs{\the\baaru:curY}}%
  }%
  \:next
}
\def\disablebaaruabbrevs#1{%
  \removebaaruhook{every#1line}{\baaru:enable_abbrevs_on_this_row}%
}%
\newcounter{fnexesi}
\def\thefnexesi{\roman{fnexesi}}
\ifdef\c@footnote{%
  \@addtoreset{fnexesi}{footnote}
}{}
\ifdef\c@endnote{%
  \@addtoreset{fnexesi}{endnote}
}{}
\newcounter{exesi}
\baaru:if_use_chapter_labels{%
  \def\theexesi{\thechapter.\arabic{exesi}}%
}{%
  \def\theexesi{\arabic{exesi}}%
}
\baaru:if_reset_for_chapters{%
  \@addtoreset{exesi}{chapter}
}{}%
\newcounter{exesii}
\def\theexesii{\alph{exesii}}
\def\p@exesii{\thetopexes}
\@addtoreset{exesii}{exesi}
\@addtoreset{exesii}{fnexesi}
\newcounter{exesiii}
\def\theexesiii{\roman{exesiii}}
\def\p@exesiii{\thetopexes\theexesii.}
\@addtoreset{exesiii}{exesii}
\newcounter{exesiv}
\def\theexesiv{\Alph{exesiv}}
\def\p@exesiv{\thetopexes\theexesii.\theexesiii.}
\@addtoreset{exesiv}{exesiii}
\def\baaruexno{%
  \@ifstar\baaru:exno@star\baaru:exno
}
\def\baaru:exno#1{%
  \refstepcounter{#1}%
  \csname ::baaru::label#1\endcsname{\csname the#1\endcsname}%
}
\def\baaru:exno@star#1{%
  \baaru:if_in_footnote{%
    \baaru:maybe_init_labelwidth
  }{}%
  \refstepcounter{#1}%
  \@tempdima\csname ::baaru::labelwidth#1\endcsname
  \advance\@tempdima\::baaru::labelsep\relax
  \hbox to\@tempdima{%
    \::baaru::makelabel{%
      \csname ::baaru::label#1\endcsname{\csname the#1\endcsname}%
    }%
    \hskip\::baaru::labelsep
  }%
}
\newenvironment{examples}[1][]{%
  \baaru:if_in_ex{%
    \baaru:close_to_outer
    \baaru:if_scanning{%
      \csname baaru:deactivate::scan@\baaru:cur_style\endcsname
      \csname baaru:activate::env@\baaru:cur_style\endcsname
      \let\baaru:if_scanning\@secondoftwo
      \let\baaru:if_was_scanning\@firstoftwo
    }{}%
    \let\baaru:if_in_ex\@secondoftwo
  }{}%
  \ifnum\@listdepth>5\relax
    \@toodeep
  \else
    \global\advance\@listdepth\@ne
    \ifnum\baaru:exdepth>\thr@@
      \@toodeep
    \else
      \advance\baaru:exdepth\@ne
      \ifnum\baaru:exdepth=\@ne
        \par
        \baaru:if_in_footnote{%
          \def\baaru:excounter{fnexesi}%
          \let\thetopexes\thefnexesi
        }{%
          \def\baaru:excounter{exesi}%
          \let\thetopexes\theexesi
          \baaru:maybe_init_labelwidth
        }%
        \labelsep\::baaru::labelsep\relax
        \partopsep\::baaru::partopsep\relax
        \topsep\::baaru::topsepi\relax
        \itemsep\::baaru::itemsepi\relax
        \parsep\::baaru::parsepi\relax
      \else
        \edef\baaru:excounter{exes\romannumeral\baaru:exdepth}%
        \ifnum\baaru:exdepth=\tw@
          \topsep\::baaru::topsepii\relax
          \itemsep\::baaru::itemsepii\relax
          \parsep\::baaru::parsepii\relax
        \fi
      \fi
      \baaru:ncols\@ne
      \interlinepenalty=10000\relax
      \allowbreak
      \letcs\@itemlabel{the\baaru:excounter}%
      \@nmbrlisttrue
      \rightmargin\z@
      \listparindent\z@
      \itemindent\z@
      \usebaaruhook{every\baaru:excounter}%
      \ifblank{#1}{}{%
        \baaruset{#1}%
      }%
      \baaru:if_ijal{%
        \ifnum\baaru:exdepth=\@ne
          \labelwidth\csname ::baaru::labelwidth\baaru:excounter\endcsname\relax
          \leftmargin\labelwidth
          \advance\leftmargin\labelsep
        \else
          \leftmargin\z@
        \fi
      }{%
        \labelwidth\csname ::baaru::labelwidth\baaru:excounter\endcsname\relax
        \leftmargin\labelwidth
        \advance\leftmargin\labelsep
      }%
      \@trivlist
      \parskip\parsep
      \parindent\listparindent
      \advance\linewidth-\rightmargin
      \advance\linewidth-\leftmargin
      \baaru:linewidth\linewidth
      \advance\@totalleftmargin\leftmargin
      \parshape\@ne\@totalleftmargin\baaru:linewidth
      \ifnum\baaru:exdepth=\@ne
        \csname baaru:activate::env@\baaru:cur_style\endcsname
      \fi
      \ignorespaces
    \fi
  \fi
}{%
  \baaru:if_in_ex{\baaru:close_example}{}%
  \endtrivlist
  \global\advance\@listdepth\m@ne
  \baaru:if_was_scanning{%
    \endgroup
  }{}%
  \allowbreak
}
\let\baaru:endexample\relax
\newenvironment{example}[1][]{%
  \ifnum\baaru:exdepth=\z@
    \let\baaru:endexample\endexamples
    \examples[#1]%
  \else
    \ifblank{#1}{}{%
      \BaaruError{Pointless optional argument given to nested example environment}\@eha
    }%
    \let\baaru:endexample\relax
  \fi
  \ex
}{%
  \baaru:endexample
}
\let\baaru:endsubexamples\relax
\newenvironment{subexamples}[1][]{%
  \ifnum\baaru:exdepth=\z@
    \let\baaru:endsubexamples\endexamples
    \examples[#1]
    \ex
      \begin{examples}%
  \else
    \let\baaru:endsubexamples\relax
    \ex
      \begin{examples}[#1]
  \fi
}{%
  \csname ::baaru::end.orig\endcsname{examples}%
  \baaru:endsubexamples
}%
\protected\def\baarucols#1{%
  \baaru:if_in_ex{%
    \BaaruError{\string\baarucols\space cannot be used after \string\ex}\@eha
  }{%
    \ifnum\baaru:exdepth=\z@
      \BaaruError{\string\baarucols\space can only be used in an examples environment}\@eha
    \else
      \baaru:ncols#1\relax
      \baaru:colno\z@
      \count@\baaru:ncols
      \advance\count@\m@ne
      \@tempdima\::baaru::colspacing\relax
      \multiply\@tempdima by\count@
      \baaru:column_width\baaru:linewidth
      \advance\baaru:column_width-\@tempdima
      \divide\baaru:column_width by\baaru:ncols
      \advance\baaru:column_width-\labelwidth
      \advance\baaru:column_width-\labelsep
      \baaru:linewidth\baaru:column_width
      \def\baaru:ex@{\baaru:ex@cols}%
      \def\baaru:close_example{\baaru:close_example@cols}%
      \let\baaru:if_in_columns\@firstoftwo
    \fi
  }%
}
\def\baaru:ex@cols{%
  \ifnum\baaru:colno=\z@
    \baaru:itemspace
    \baaru:prevdepth\z@
  \else
    \hskip\::baaru::colspacing\relax
    \hskip\labelwidth
    \hskip\labelsep
  \fi
  \baaru:parskip\parskip
  \baaru:counta\@listdepth
  \let\baaru:par@saved\par
  \begin{minipage}[t]{\baaru:column_width}%
    \parskip\baaru:parskip
    \parshape\@ne\@totalleftmargin\baaru:column_width
    \let\par\baaru:par@saved
    \@listdepth\baaru:counta
    \baaru:itemlabel
}
\def\baaru:close_example@cols{%
  \baaru:close_to_outer
  \baaru:if_scanning{%
    \endgroup
  }{}%
  \par
  \ifdim\prevdepth>\baaru:prevdepth
    \global\baaru:prevdepth\prevdepth
  \fi
  \global\baaru:cached_width\labelwidth
  \end{minipage}%
  \let\baaru:if_in_ex\@secondoftwo
  \labelwidth\baaru:cached_width
  \advance\baaru:colno\@ne
  \ifnum\baaru:colno=\baaru:ncols
    \baaru:colno\z@
    \par
    \prevdepth\baaru:prevdepth
  \fi
}
\def\baaru:itemspace{%
  \@inmatherr\ex
  \if@noparitem
    \@donoparitem
  \else
    \if@inlabel
      \indent
      \par
    \fi
    \ifhmode\unskip\unskip\par\fi
    \if@newlist
      \if@nobreak
        \@nbitem
      \else
        \addpenalty\@beginparpenalty
        \addvspace\@topsep
        \addvspace{-\parskip}%
      \fi
    \else
      \addpenalty\@itempenalty
      \addvspace\itemsep
    \fi
  \fi
}
\def\baaru:itemlabel{%
  \@ifnextchar[{\baaru:itemlabel@}{\@noitemargtrue\baaru:itemlabel@[\@itemlabel]}%]
}
\def\baaru:itemlabel@[#1]{%
  \everypar{%
    \@minipagefalse
    \global\@newlistfalse
    \if@inlabel
      \global\@inlabelfalse
      \global\let\baaru:if_preempt_newline\@secondoftwo
      {\setbox\z@\lastbox\ifvoid\z@\kern-\itemindent\fi}%
      \box\@labels
      \penalty\z@
    \fi
    \if@nobreak
      \@nobreakfalse
      \clubpenalty\@M
    \else
      \clubpenalty\@clubpenalty
      \everypar{}%
    \fi
  }%
  \if@noitemarg
    \@noitemargfalse
    \baaru:hyperref:its_refstepcounter
    \refstepcounter\baaru:excounter
  \else
    \ifblank{#1}{}{%
      \protected@edef\@currentlabel{#1}%
    }%
  \fi
  \sbox\@tempboxa{%
    \::baaru::makelabel{%
      \ifblank{#1}{}{%
        \baaru:if_starred{%
          #1%
        }{%
          \csname ::baaru::label\baaru:excounter\endcsname{#1}%
        }%
      }%
    }%
  }%
  \baaru:cur_label_wd\wd\@tempboxa
  \ifdim\baaru:cur_label_wd>\labelwidth
    \@tempdima\baaru:cur_label_wd
    \advance\@tempdima-\labelwidth
    \advance\leftmargin\@tempdima
    \advance\linewidth-\@tempdima
    \baaru:linewidth\linewidth
    \advance\@totalleftmargin\@tempdima
    \parshape\@ne\@totalleftmargin\baaru:linewidth
    \labelwidth\baaru:cur_label_wd
    \typeout{(baarux) adjusted labelwidth to \the\labelwidth\space for example (\@currentlabel)\on@line}%
  \fi
  \global\setbox\@labels\hbox{%
    \baaru:if_ijal{}{\unhbox\@labels}%
    \hskip\itemindent
    \hskip-\labelwidth
    \hskip-\labelsep
    \hbox to\labelwidth{\unhbox\@tempboxa}%
    \strut
    \hskip\labelsep
  }%
  \baaru:hyperref:maybe_fix_height
  \global\@inlabeltrue
  \global\let\baaru:if_preempt_newline\@firstoftwo
  \usebaaruhook{everyex}%
  \ignorespaces
}
\let\baaru:hyperref:its_refstepcounter\relax
\let\baaru:hyperref:maybe_fix_height\relax
\AtBeginDocument{%
  \baaru:check_for_hyperref
}%
\def\baaru:check_for_hyperref{%
  \@ifpackageloaded{hyperref}{%
    \let\baaru:hyperref:its_refstepcounter\baaru:hyperref:do_refstepcounter_check
    \edef\baaru:hyperref:hyperlinkend_meaning{\meaning\hyper@linkend}%
    \let\theHexesi\theexesi
    \def\theHfnexesi{\csname the\@mpfn\endcsname.\thefnexesi}%
    \def\theHexesii{\thetopexes.\theexesii}%
    \def\theHexesiii{\theHexesii.\theexesiii}%
    \def\theHexesiv{\theHexesiii.\theexesiv}%
  }{}%
}
\def\baaru:hyperref:fix_height{%
  \vskip-\ht\@labels
  \vskip-\parskip
  \let\baaru:hyperref:fix_height\relax
}
\def\baaru:hyperref:do_refstepcounter_check{%
  \baaru:if_in_columns{%
    \edef\:needle{\meaning\hyper@linkend}%
    \ifx\:needle\baaru:hyperref:hyperlinkend_meaning
      \let\baaru:hyperref:maybe_fix_height\baaru:hyperref:fix_height
    \fi
  }{}%
}
\def\baaru:tokens_to_cache{%
  \baaru:cache_cs\ex
  \baaru:cache_cs\begin
    \baaru:cache_cs\end
  \baaru:cache_cs\ %
}%
\cslet{baaru:cached::\string\ex}\relax
\cslet{baaru:cached::\string\begin}\relax
\cslet{baaru:cached::\string\end}\relax
\cslet{baaru:cached::\string\ }\relax
\AtBeginDocument{%
  \baaru:tokens_to_cache\undef\baaru:tokens_to_cache
}%
\def\baaru:cache_cs#1{%
  \ifcsdef{::baaru::\expandafter\@gobble\string#1.orig}{}{%
    \cslet{::baaru::\expandafter\@gobble\string#1.orig}#1%
  }%
}
\def\baaru:cache_char#1{%
  \ifcsdef{::baaru::#1.catcode}{}{%
    \csedef{::baaru::#1.catcode}{\the\catcode`#1}%
  }%
}
\def\baaru:check_cs#1{%
  \expandafter\baaru:check_cs@\string#1\:delim{#1}%
}
\def\baaru:check_cs@#1#2\:delim#3{%
  \ifnum\catcode`#1=\z@
    \let\baaru:if_cs\@firstoftwo
    \def\:baaruname{#3}%
  \else
    \let\baaru:if_cs\@secondoftwo
    \def\:baaruname{#1}%
    \ifblank{#2}{}{%
      \def\:baaruextra{#2}%
    }%
  \fi
}
\def\baaru:if_name_available#1#2{%
  \ifcsdef{baaru:defined::\string#1@\baaru:cur_style}{%
    \baaru:if_defining_for_line{#1}{#2}{%
      \expandafter\@firstoftwo
    }{%
      \BaaruError{\string#1 is already defined in the current style}\@ehd
      \expandafter\@secondoftwo
    }%
  }{%
    \csdef{baaru:defined::\string#1@\baaru:cur_style}{#2}%
    \ifcsdef{baaru:cached::\string#1}{}{%
      \baaru:if_cs{%
        \ifdef\baaru:tokens_to_cache{%
          \appto\baaru:tokens_to_cache{\baaru:cache_cs#1}%
        }{%
          \baaru:cache_cs#1%
        }%
      }{%
        \ifdef\baaru:tokens_to_cache{%
          \appto\baaru:tokens_to_cache{\baaru:cache_char#1}%
        }{%
          \baaru:cache_char#1%
        }%
      }%
      \cslet{baaru:cached::\string#1}\relax
    }%
    \@firstoftwo
  }%
}%
\def\baaru:if_defining_for_line#1#2{%
  \if#2l%
    \if l\csname baaru:defined::\string#1@\baaru:cur_style\endcsname
      \expandafter\expandafter\expandafter\@firstoftwo
    \else
      \expandafter\expandafter\expandafter\@secondoftwo
    \fi
  \else
    \expandafter\@secondoftwo
  \fi
}%
\protected\def\newbaarucmd{%
  \@ifstar\baaru:newcmd@scan{%
    \@ifnextchar[\baaru:newcmd@lines\baaru:newcmd@aligned%]
  }%
}
\def\baaru:newcmd@env#1{%
  \baaru:define{e}{#1}{\baaru:newcmd@env@}%
}
\def\baaru:newcmd@scan#1{%
  \baaru:define{s}{#1}{\baaru:newcmd@scan@}%
}
\def\baaru:newcmd@lines[#1]#2{%
  \baaru:define{l}{#2}{\baaru:newcmd@lines@{#1}}%
}
\def\baaru:newcmd@aligned#1{%
  \baaru:define{g}{#1}{\baaru:newcmd@aligned@}%
}
\let\baaru:new_cmd\newbaarucmd
\def\baarudefforrow#1#2{%
  \def\newbaarucmd{\baaru:new_cmd@row{#1}}%
  #2%
  \let\newbaarucmd\baaru:new_cmd
}
\def\baaru:new_cmd@row#1{%
  \@ifstar{%
    \BaaruError{Commands for the environment as a whole cannot\MessageBreak be defined for particular gloss rows}\@eha
    \baaru:new_cmd@row@@{#1}{}%
  }{%
    \@ifnextchar[{\baaru:new_cmd@row@{#1}}{\baaru:new_cmd@row@@{#1}{}}%]
  }%
}
\def\baaru:new_cmd@row@#1[#2]{%
  \baaru:new_cmd@row@@{#1}{[#2]}%
}
\def\baaru:new_cmd@row@@#1#2#3{%
  \csdef{baaru:insertion_row::\string#3@\baaru:cur_style}{#1}%
  \csdef{::baaru:set::\string#3.row}##1{%
    \csdef{baaru:insertion_row::\string#3@\baaru:cur_style}{##1}%
  }%
  \baaru:new_cmd#2{#3}%
}%
\def\baaruforrow#1#2{%
  \csdef{baaru:insertion_row::\string#1@\baaru:cur_style}{#2}%
}
\def\baaru:define#1#2#3{%
  \undef\:baaruname
  \undef\:baarucmd
  \undef\:baaruextra
  \baaru:check_cs{#2}%
  \expandafter\baaru:if_name_available\expandafter{\:baaruname}{#1}{%
    \ifdef\:baaruextra{%
      \edef\:temp{%
        \def\noexpand\:baarucmd####1\:baaruextra
      }%
      \def\:next{#3}%
      \afterassignment\:next
      \:temp
    }{%
      \def\:temp{#3}%
      \afterassignment\:temp
      \def\:baarucmd
    }%
  }{}%
}
\def\baaru:newcmd@env@{%
  \baaru:if_cs{%
    \ifcsdef{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}{}{%
      \expandafter\baaru:register_cmd\:baaruname{scan}%
      \cseappto{baaru:activate::env@\baaru:cur_style}{%
        \let\expandonce\:baaruname
        \expandafter\noexpand
        \csname baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style\endcsname
      }%
    }%
    \csedef{baaru:cmd::\expandafter\string\:baaruname}{%
      \noexpand\csname baaru:cmd::\expandafter\string\:baaruname @\noexpand\baaru:cur_style\endcsname
    }%
    \cslet{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}\:baarucmd
  }{%
    \BaaruError{You can't define individual characters as special
      \MessageBreak tokens for the examples environment as a whole}\@eha
  }%
}
\def\baaru:newcmd@scan@{%
  \ifcsdef{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}{}{%
    \expandafter\baaru:register_cmd\:baaruname{scan}%
  }%
  \csedef{baaru:cmd::\expandafter\string\:baaruname}{%
    \noexpand\csname baaru:cmd::\expandafter\string\:baaruname @\noexpand\baaru:cur_style\endcsname
  }%
  \cslet{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}\:baarucmd
}
\def\baaru:newcmd@aligned@{%
  \ifcsdef{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}{}{%
    \expandafter\baaru:register_cmd\:baaruname{aligned}%
  }%
  \csedef{baaru:cmd::\expandafter\string\:baaruname}{%
    \noexpand\csname baaru:cmd::\expandafter\string\:baaruname @\noexpand\baaru:cur_style\endcsname
  }%
  \cslet{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}\:baarucmd
}%
\def\baaru:newcmd@lines@#1{%
  \baaru:foreach\baaru:newcmd@one_line{#1}%
}
\def\baaru:newcmd@one_line#1{%
  \ifcsdef{baaru:activate::line@#1@\baaru:cur_style}{%
    \ifcsdef{baaru:cmd::\expandafter\string\:baaruname @#1@\baaru:cur_style}{}{%
      \expandafter\baaru:register_cmd\:baaruname{line@#1}%
    }%
    \csedef{baaru:cmd::\expandafter\string\:baaruname}{%
      \noexpand\csname baaru:cmd::\expandafter\string\:baaruname @\noexpand\baaru:cur_style\endcsname
    }%
    \csedef{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}{%
      \noexpand\csname baaru:cmd::\expandafter\string\:baaruname @\noexpand\baaru:cur_line @\noexpand\baaru:cur_style\endcsname
    }%
    \cslet{baaru:cmd::\expandafter\string\:baaruname @#1@\baaru:cur_style}\:baarucmd
  }{%
    \BaaruError{No line type named #1 has been defined\MessageBreak in the current style}\@eha
  }%
}
\def\baaru:register_cmd#1#2{%
  \baaru:if_cs{%
    \csappto{baaru:activate::#2@\baaru:cur_style}{%
      \let#1\:baaru:
    }%
    \letcs\:temp{::baaru::\expandafter\@gobble\string#1.orig}%
    \cseappto{baaru:deactivate::#2@\baaru:cur_style}{%
      \let\noexpand#1\expandafter\noexpand
      \csname ::baaru::\expandafter\@gobble\string#1.orig\endcsname
    }%
    \cslet{::baaru::\expandafter\@gobble\string#1.orig}\:temp
  }{%
    \csappto{baaru:activate::#2@\baaru:cur_style}{\catcode`#1=04\relax}%
    \letcs\:temp{::baaru::#1.catcode}%
    \cseappto{baaru:deactivate::#2@\baaru:cur_style}{%
      \catcode`#1=\expandafter\noexpand
      0\csname ::baaru::#1.catcode\endcsname
      \relax
    }%
    \cslet{::baaru::#1.catcode}\:temp
  }%
}%
\protected\def\killbaarucmd{%
  \@ifnextchar[\baaru:killcmd@lines\baaru:killcmd%]
}
\def\baaru:killcmd#1{%
  \baaru:check_cs{#1}%
  \ifcsdef{baaru:defined::\expandafter\string\:baaruname @\baaru:cur_style}{%
    \edef\:temp{%
      \csname baaru:defined::\expandafter\string\:baaruname @\baaru:cur_style\endcsname
    }%
    \if e\:temp
      \baaru:killcmd@env
    \else\if s\:temp
      \baaru:killcmd@scan
    \else\if g\:temp
      \baaru:killcmd@gloss
    \else\if l\:temp
      \forlistcsloop\baaru:killcmd@one_line{baaru:lines@\baaru:cur_style}%
      \baaru:killcmd@lines@
    \else
      \BaaruError{\expandafter\string\:baaruname\space cannot be undefined or redefined}\@eha
    \fi\fi\fi\fi
  }{%
    \BaaruError{\expandafter\string\:baaruname\space is undefined}\@eha
  }%
}
\def\baaru:killcmd@lines[#1]#2{%
  \baaru:check_cs{#2}%
  \ifcsdef{baaru:defined::\expandafter\string\:baaruname @\baaru:cur_style}{%
    \edef\:temp{%
      \csname baaru:defined::\expandafter\string\:baaruname @\baaru:cur_style\endcsname
    }%
    \if l\:temp
      \baaru:foreach\baaru:killcmd@one_line{#1}%
    \else
      \BaaruError{\expandafter\string\:baaruname\string\space was not defined for
        particular lines}\@eha
    \fi
  }{%
    \BaaruError{\expandafter\string\:baaruname\space is undefined}\@eha
  }%
}
\def\baaru:killcmd@env{%
  \csundef{baaru:defined::\expandafter\string\:baaruname @\baaru:cur_style}%
  \csundef{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}%
  \baaru:unregister_cmd{scan}%
  \expandafter\baaru:unregister_cmd@\csname baaru:activate::env@\baaru:cur_style\endcsname
}
\def\baaru:killcmd@scan{%
  \csundef{baaru:defined::\expandafter\string\:baaruname @\baaru:cur_style}%
  \csundef{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}%
  \baaru:unregister_cmd{scan}%
}
\def\baaru:killcmd@gloss{%
  \csundef{baaru:defined::\expandafter\string\:baaruname @\baaru:cur_style}%
  \csundef{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}%
  \baaru:unregister_cmd{scan}%
}
\def\baaru:killcmd@gloss{%
  \csundef{baaru:defined::\expandafter\string\:baaruname @\baaru:cur_style}%
  \csundef{baaru:cmd::\expandafter\string\:baaruname @\baaru:cur_style}%
  \baaru:unregister_cmd{gloss}%
}
\def\baaru:killcmd@one_line#1{%
  \ifcsdef{baaru:cmd::\expandafter\string\:baaruname @#1@\baaru:cur_style}{%
    \csundef{baaru:cmd::\expandafter\string\:baaruname @#1@\baaru:cur_style}%
    \baaru:unregister_cmd{line@#1}%
  }{}%
}
\def\baaru:killcmd@lines@{%
  \csundef{baaru:defined::\expandafter\string\:baaruname @\baaru:cur_style}%
}
\def\baaru:unregister_cmd#1{%
  \expandafter\baaru:unregister_cmd@\csname baaru:activate::#1@\baaru:cur_style\endcsname
  \expandafter\baaru:unregister_cmd@\csname baaru:deactivate::#1@\baaru:cur_style\endcsname
}
\def\baaru:unregister_cmd@#1{%
  \let\baaru:cached_let\let
  \let\baaru:cached_catcode\catcode
  \baaru:if_cs{%
    \expandafter\let\expandafter\baaru:cached\:baaruname
    \expandafter\edef\:baaruname{\expandonce\:baaruname}
    \let\catcode\baaru:no_kill@char
    \let\let\baaru:maybe_kill@cs
  }{%
    \let\catcode\baaru:maybe_kill@char
    \let\let\baaru:no_kill@cs
  }%
  \edef#1{#1}%
  \baaru:cached_let\let\baaru:cached_let
  \let\catcode\baaru:cached_catcode
  \baaru:if_cs{%
    \expandafter\let\:baaruname\baaru:cached
  }{}%
}
\def\baaru:no_kill@cs#1#2{\unexpanded{\let#1#2}}
\def\baaru:no_kill@char#1#2=0#3\relax{\unexpanded{\catcode#1#2=0#3\relax}}
\def\baaru:maybe_kill@cs#1#2{%
  \ifx#1\:baaruname\else
    \unexpanded{\let#1#2}%
  \fi
}
\def\baaru:maybe_kill@char#1#2=0#3\relax{%
  \if#2\:baaruname\else
    \unexpanded{\catcode#1#2=0#3\relax}%
  \fi
}
\csedef{baaru:cmd::\string\begin}{%
  \expandafter\noexpand\csname ::baaru::begin.orig\endcsname
}
\csedef{baaru:cmd::\string\end}{%
  \expandafter\noexpand\csname ::baaru::end.orig\endcsname
}
\csundef{::baaru::begin.orig}
\csundef{::baaru::end.orig}
\def\baaruex{%
  \baaru:if_in_ex{%
    \baaru:close_example
  }{}%
  \let\baaru:if_in_ex\@firstoftwo
  \let\baaru:close_to_outer\relax
  \edef\baaru:cur_par{\::baaru::preamblepar}%
  \baaru:if_suppress_labels{%
    \baaru:ex@[]%
  }{%
    \@ifstar{%
      \let\baaru:if_starred\@firstoftwo
      \@ifnextchar[\baaru:ex@{\baaru:ex@[]}%
    }{%
      \let\baaru:if_starred\@secondoftwo
      \baaru:ex@
    }%
  }%
}
\csdef{baaru:cmd::\string\ex}{%
  \baaruex
}
\def\baaru:ex@{%
  \baaru:itemspace\baaru:itemlabel
}
\def\baaru:close_example{%
  \baaru:close_to_outer
  \baaru:if_scanning{%
    \endgroup
  }{}%
  \let\baaru:if_in_ex\@secondoftwo
}
\csdef{baaru:cmd::&}{%
  \baaru:if_in_gloss{%
    \baaru:if_in_cells{%
      \::baaru::if_explicitcells{%
        \baaru:next_cell{\baaru:scan_state::empty}%
      }{%
        \BaaruError{Suffixes don't work in gloss cells}\@eha
      }%
    }{%
      \baaru:close_insert_block
    }%
  }{%
    \baaru:cache=\baaru:buffer
    \baaru:buffer={}%
    \let\baaru:if_has_suffix\@firstoftwo
  }%
  \baaru:scan
}%
\csdef{baaru:cmd::\string\ }{%
  \csuse{baaru:scan_space} % space
}%
\protected\def\newbaarulinetype#1#2#3{%
  \letcs\@tempa{#2}%
  \ifcsdef{baaru:new_line_type::#1}{%
    \csname baaru:new_line_type::#1\endcsname{#2}{#3}%
  }{%
    \baaru:new_simple_line_type{#1}{#2}{#3}%
  }%
  \newbaaruhook{every#2line}{@\baaru:cur_style}%
  \listcsadd{baaru:lines@\baaru:cur_style}{#2}%
  \cslet{baaru:activate::line@#2@\baaru:cur_style}\@empty
  \cslet{baaru:deactivate::line@#2@\baaru:cur_style}\@empty
  \cslet{#2}\@tempa
}
\def\baaru:new_simple_line_type#1#2#3{%
  \baaru:init_markup{#2}{#3}%
  \baaru:init_parlabel{#2}{#1}%
  \expandafter\baaru:newcmd@env\csname#2\endcsname{\baaru:simple_line{#2}}%
}
\def\baaru:new_line_type::rightcomment#1#2{%
  \baaru:init_markup{#1}{#2}%
  \expandafter\baaru:newcmd@env\csname#1\endcsname{\baaru:rightcomment{#1}}%
}
\def\baaru:new_line_type::citation#1#2{%
  \baaru:init_markup{#1}{#2}%
  \expandafter\baaru:newcmd@env\csname#1\endcsname{\baaru:citation{#1}}%
}
\def\baaru:new_line_type::aligned#1#2{%
  \baaru:init_markup{#1}{#2}%
  \expandafter\baaru:newcmd@env\csname#1\endcsname{\baaru:aligned_line{#1}}%
}
\def\baaru:new_line_type::nlevel#1#2{%
  \baaru:counta\z@
  \def\do##1{%
    \edef\@tempa{#1\baalph\baaru:counta}%
    \baaru:init_markup{\@tempa}{##1}%
    \cslet{baaru:activate::line@\@tempa @\baaru:cur_style}\@empty
    \cslet{baaru:deactivate::line@\@tempa @\baaru:cur_style}\@empty
    \edef\@tempa{every\@tempa line}%
    \expandafter\newbaaruhook\expandafter{\@tempa}{@\baaru:cur_style}%
    \advance\baaru:counta\@ne
  }%
  \baaru:foreach\do{#2}%
  \edef\:next{%
    \noexpand\baaru:newcmd@env\expandafter\noexpand\csname#1\endcsname
    {\noexpand\baaru:nlevel_line{#1}{\the\baaru:counta}}%
  }%
  \:next
}
\def\baaru:new_line_type::insert#1#2{%
  \expandafter\baaru:newcmd@env\csname#1\endcsname{\baaru:insert{#1}{#2}}%
}
\def\baaru:init_markup#1#2{%
  \csdef{baaru:markup::#1@\baaru:cur_style}{#2}%
  \csedef{::baaru:set::#1.markup}##1{%
    \csdef{baaru:markup::#1@\noexpand\baaru:cur_style}{##1}%
  }%
  \csedef{::baaru::#1.markup}{%
    \noexpand\csname baaru:markup::#1@\noexpand\baaru:cur_style\endcsname
  }%
}
\def\baaru:init_parlabel#1#2{%
  \csdef{baaru:parlabel::#1@\baaru:cur_style}{#2}%
  \csdef{::baaru:set::#1.parlabel}##1{%
    \csdef{baaru:parlabel::#1@\baaru:cur_style}{##1}%
  }%
  \csdef{::baaru::#1.parlabel}{%
    \csname baaru:parlabel::#1@\baaru:cur_style\endcsname
  }%
}
\def\killbaarulinetype#1{%
  \letcs\@tempa{#1}%
  \expandafter\killbaarucmd\csname #1\endcsname
  \csundef{baaru:markup::#1@\baaru:cur_style}%
  \csundef{baaru:parlabel::#1@\baaru:cur_style}%
  \listcsremove{baaru:lines@\baaru:cur_style}{#1}%
  \csundef{baaru:activate::line@#1@\baaru:cur_style}%
  \csundef{baaru:deactivate::line@#1@\baaru:cur_style}%
  \cslet{#1}\@tempa
}
\def\baaru:next_line#1{%
  \baaru:if_preempt_newline{%
    \global\let\baaru:if_preempt_newline\@secondoftwo
  }{%
    \ifhmode
      \::baaru::if_pars{%
        \edef\@tempa{#1}%
        \ifx\@tempa\baaru:cur_par
          \newline
        \else
          \par\nobreak
        \fi
      }{%
        \newline
      }%
    \fi
  }%
  \edef\baaru:cur_par{#1}%
}
\def\baaru:init_scanning{%
  \usebaaruhook{everyscan}%
  \begingroup
  \csname baaru:activate::scan@\baaru:cur_style\endcsname
  \let\baaru:if_scanning\@firstoftwo
}%

\def\baaru:scan:start{%
  \baaru:buffer={}%
  \let\baaru:scan_state\baaru:scan_state::empty
  \let\baaru:if_buffered_space\@secondoftwo
  \let\baaru:if_multicol\@secondoftwo
  \baaru:if_optarg\baaru:scan_judgment\baaru:scan
}%
\def\baaru:scan_judgment#1{%
  \baaru:if_in_gloss{%
    \baaru:save_judgment{#1}%
  }{%
    \baaru:judge{#1}%
  }%
  \baaru:scan
}
\def\baaru:scan{%
  \futurelet\:token\baaru:scan@
}
\let\baaruscan\baaru:scan
\def\baaru:scan@{%
  \ifx\:token\@sptoken
    \let\:next\baaru:scan_space
  \else\ifcat\noexpand\:token&%
    \let\:next\baaru:scan_control
  \else\ifx\:token\bgroup
    \let\:next\baaru:scan_group
  \else
    \let\:next\baaru:scan_other
  \fi\fi\fi
  \:next
}
\csdef{baaru:scan_space} {%
  \baaru:if_buffer_empty{}{%
    \baaru:if_in_cells{%
      \::baaru::if_explicitcells{%
        \let\baaru:if_buffered_space\@firstoftwo
      }{%
        \baaru:next_cell{\baaru:scan_state::empty}%
      }%
    }{%
      \let\baaru:if_buffered_space\@firstoftwo
    }%
  }%
  \baaru:scan
}
\def\baaru:scan_control#1{%
  \def\baaru:cur_cmd{#1}%
  \csname baaru:cmd::\string#1\endcsname
}
\def\baaru:scan_group{%
  \begingroup
  \csname baaru:deactivate::scan@\baaru:cur_style\endcsname
  \baaru:if_in_cells{%
    \csname baaru:deactivate::aligned@\baaru:cur_style\endcsname
  }{}%
  \csname baaru:deactivate::line@\baaru:cur_line @\baaru:cur_style\endcsname
  \baaru:scan_group@
}
\long\def\baaru:scan_group@#1{%
  \endgroup
  \baaru:add_to_buffer{{#1}}%
  \baaru:scan
}
\long\def\baaru:scan_other#1{%
  \baaru:add_to_buffer{#1}%
  \baaru:scan
}
\long\def\baaru:add_to_buffer#1{%
  \ifdef\baaru:cur_line{}{%
    \BaaruError{You've got some text between lines,\MessageBreak
      maybe after \string\baarucontd\space or \string\baarupar}\@ehb
  }%
  \ifcase\csname baaru:scan_state::\baaru:scan_state @type\endcsname
    % empty
    \baaru:buffer={#1}%
    \let\baaru:scan_state\baaru:scan_state::plain
  \or % plain
    \baaru:if_buffered_space{%
      \edef\:do{%
        \baaru:buffer={\the\baaru:buffer\space\unexpanded{#1}}%
      }%
      \:do
      \let\baaru:if_buffered_space\@secondoftwo
    }{%
      \baaru:buffer=\expandafter{\the\baaru:buffer#1}%
    }%
  \or  % prefix
    \baaru:buffer=\expandafter{\the\baaru:buffer#1}%
    \let\baaru:scan_state\baaru:scan_state::plain
  \else % unglossed
    \baaru:next_cell{\baaru:scan_state::plain}%
    \baaru:buffer={#1}%
    \let\baaru:if_buffered_space\@secondoftwo
  \fi
}
\def\baarubuffer#1{\baaru:add_to_buffer{#1}\baaruscan}
\def\baarujudge#1{%
  \baaru:if_scanning{%
    \BaaruError{\string\baarujudge\space cannot be used after a line command}{Use an optional argument to the line command instead}%
  }{%
    \baaru:judge{#1}%
  }%
  \ignorespaces
}
\def\baaru:judge#1{%
  \if@inlabel
    \baaru:if_scanning{%
      \baaru:adjust_labelsep_for_judgment_while_scanning{#1}%
    }{%
      \baaru:adjust_labelsep_for_judgment{#1}%
    }%
  \fi
  \ifvmode\leavevmode\fi
  \baaru:if_in_gloss{%
    \ifdim\::baaru::glossindent=\z@
      \llap{\baaru:judge@{#1}}%
    \else
      \rlap{%
        \hskip\the\::baaru::glossindent
        \llap{\baaru:judge@{#1}}%
      }%
    \fi
  }{%
    \llap{\baaru:judge@{#1}}%
  }%
  \ignorespaces
}
\def\baaru:judge@#1{%
  \::baaru::judgmentstyle{#1}%
  \hskip\::baaru::judgmentpostsep\relax
}
\def\baaru:save_judgment#1{%
  \csdef{baaru:judgment::\the\baaru:curY}{#1}%
}
\def\baaru:adjust_labelsep_for_judgment#1{%
  \sbox\@tempboxa{#1}%
  \@tempdima\labelwidth
  \advance\@tempdima\labelsep
  \advance\@tempdima\::baaru::glossindent
  \advance\@tempdima-\baaru:cur_label_wd
  \advance\@tempdima-\wd\@tempboxa
  \advance\@tempdima-\::baaru::judgmentpostsep
  \ifdim\@tempdima<\::baaru::judgmentpresep
    \advance\@tempdima-\::baaru::judgmentpresep
    \advance\labelsep-\@tempdima
    \advance\leftmargin-\@tempdima
    \advance\linewidth\@tempdima
    \baaru:linewidth\linewidth
    \advance\@totalleftmargin-\@tempdima
    \parshape\@ne\@totalleftmargin\baaru:linewidth
    \global\setbox\@labels\hbox{%
      \hskip\@tempdima
      \unhbox\@labels
      \hskip-\@tempdima
    }%
    \typeout{[baarux] adjusted labelsep to \the\labelsep\space for example (\@currentlabel)\on@line}%
  \fi
}
\def\baaru:adjust_labelsep_for_judgment_while_scanning#1{%
  \baaru:adjust_labelsep_for_judgment{#1}%
  \gdef\baaru:adjust_labelsep_for_judgment_while_scanning@{%
    \aftergroup\baaru:adjust_labelsep_for_judgment_while_scanning@@
    \baaru:adjust_labelsep_for_judgment_while_scanning@@
  }%
  \xdef\baaru:adjust_labelsep_for_judgment_while_scanning@@{%
    \labelsep\the\labelsep\relax
    \labelwidth\the\labelwidth\relax
    \leftmargin\the\leftmargin\relax
    \linewidth\the\linewidth\relax
    \baaru:linewidth\linewidth
    \@totalleftmargin\the\@totalleftmargin\relax
    \parshape\@ne\@totalleftmargin\baaru:linewidth
  }%
  \aftergroup\baaru:adjust_labelsep_for_judgment_while_scanning@
}
\def\baaru:simple_line#1{%
  \baaru:if_in_ex{%
    \baaru:if_scanning{%
      \baaru:close_to_outer
    }{%
      \baaru:init_scanning
    }%
    \expandafter\baaru:next_line\csname baaru:parlabel::#1@\baaru:cur_style\endcsname
    \begingroup
    \def\baaru:cur_line{#1}%
    \letcs\baaru:line_markup{baaru:markup::#1@\baaru:cur_style}%
    \def\baaru:close_to_outer{%
      \baaru:output_simple{#1}%
      \endgroup
    }%
    \csname baaru:activate::line@#1@\baaru:cur_style\endcsname
    \usebaaruhook{every#1line}%
    \baaru:scan:start
  }{%
    \BaaruError{Missing \string\ex}\@eha
  }%
}
\def\baaru:output_simple#1{%
  \begingroup
  \csname baaru:deactivate::scan@\baaru:cur_style\endcsname
  \csname baaru:deactivate::line@#1@\baaru:cur_style\endcsname
  \baaru:if_has_suffix{%
    \baaru:line_markup{\the\baaru:cache}{\the\baaru:buffer}%
  }{%
    \baaru:line_markup{\the\baaru:buffer}{}%
  }%
  \endgroup
}
\def\baaru:rightcomment#1{%
  \@ifstar{%
    \baaru:start_rightcomment{#1}{\baaru:cur_par}%
  }{%
    \baaru:start_rightcomment{#1}{rightcomment}%
  }%
}
\def\baaru:start_rightcomment#1#2{%
  \baaru:if_in_ex{%
    \baaru:if_scanning{%
      \baaru:close_to_outer
    }{%
      \baaru:init_scanning
    }%
    \baaru:next_line{#2}%
    \begingroup
    \def\baaru:cur_line{#1}%
    \letcs\baaru:line_markup{baaru:markup::#1@\baaru:cur_style}%
    \def\baaru:close_to_outer{%
      \baaru:output_rightcomment{#1}%
    }%
    \csname baaru:activate::line@#1@\baaru:cur_style\endcsname
    \usebaaruhook{every#1line}%
    \baaru:scan:start
  }{%
    \BaaruError{Missing \string\ex}\@eha
  }%
}
\def\baaru:output_rightcomment#1{%
  \ifvmode\leavevmode\fi
  \setbox\z@\hbox{%
    \baaru:output_simple{#1}%
  }%
  \baaru:width\baaru:linewidth
  \advance\baaru:width-\wd\z@
  \advance\baaru:width\::baaru::commentoverhang\relax
  \rlap{%
    \hskip\baaru:width
    \unhbox\z@
  }%
  \advance\baaru:width-\::baaru::commentsep\relax
  \xdef\:next{\noexpand\baaru:width\the\baaru:width\relax}%
  \endgroup
  \:next
  \parshape\tw@\parshapeindent\@ne\baaru:width\parshapeindent\@ne\baaru:linewidth
  \let\baaru:par\par
  \def\par{%
    \let\par\baaru:par
    \par
    \parshape\@ne\@totalleftmargin\baaru:linewidth
  }%
  \let\baaru:if_preempt_newline\@firstoftwo
}
\protected\def\baarutwolinerc#1#2#3#4{%
  \ifblank{#4}{%
    #1{#3}%
  }{%
    \edef\@tempa{%
      \expandafter\ignorespaces#4%
    }%
    \setbox\z@\hbox{#1{#3}}%
    \@tempdima\wd\z@
    \setbox\z@\hbox{#2{\@tempa}}%
    \ifdim\wd\z@>\@tempdima
      \@tempdima\wd\z@
    \fi
    \makebox[\@tempdima][r]{%
      #1{#3}%
      \llap{%
        \raisebox{-\baselineskip}[0pt][0pt]{%
          #2{\@tempa}%
        }%
      }%
    }%
  }%
}
\def\baaru:citation#1{%
  \@ifstar{%
    \baaru:citation@{#1}\@firstoftwo
  }{%
    \baaru:citation@{#1}\@secondoftwo
  }%
}
\def\baaru:citation@#1#2{%
  \baaru:if_in_ex{%
    \baaru:if_scanning{%
      \baaru:close_to_outer
    }{%
      \baaru:init_scanning
    }%
    \begingroup
    \def\baaru:cur_line{#1}%
    \let\baaru:if_force_newline#2%
    \letcs\baaru:line_markup{baaru:markup::#1@\baaru:cur_style}%
    \def\baaru:close_to_outer{%
      \baaru:output_citation{#1}%
      \endgroup
    }%
    \csname baaru:activate::line@#1@\baaru:cur_style\endcsname
    \usebaaruhook{every#1line}%
    \baaru:scan:start
  }{%
    \BaaruError{Missing \string\ex}\@eha
  }%
}
\def\baaru:output_citation#1{%
  \hspace*{%
    \baaru:if_force_newline{%
      \baaru:linewidth
    }{%
      \::baaru::citesep plus 1fill\relax
    }%
  }%
  \nolinebreak[3]%
  \hspace*{\fill}%
  \ifdim\::baaru::citeoverhang=\z@
    \hbox{\baaru:output_simple{#1}}%
  \else
    \setbox\z@\hbox{\baaru:output_simple{#1}}%
    \baaru:width\wd\z@
    \advance\baaru:width-\::baaru::citeoverhang\relax
    \hbox to\baaru:width{\unhbox\z@}%
  \fi
}
\def\baaru:aligned_line#1{%
  \baaru:prep_for_gloss_row
  \def\baaru:cur_line{#1}%
  \csletcs{baaru:cell_markup@\the\baaru:curY}{baaru:markup::#1@\baaru:cur_style}%
  \def\baaru:close_gloss_row{%
    \baaru:close_aligned_row{#1}%
  }%
  \cslet{baaru:if_aligned::\the\baaru:curY}\@firstoftwo
  \csname baaru:activate::line@#1@\baaru:cur_style\endcsname
  \baaru:curX\baaru:baseX % usually zero
  \baaru:init_coldata_id
  \csname baaru:activate::line@#1@\baaru:cur_style\endcsname
  \ifnum\baaru:baseX=\z@
    \usebaaruhook{every#1line}%
  \fi
  \baaru:insert_autocells
  \baaru:scan:start
}
\def\baaru:close_aligned_row#1{%
  \baaru:if_buffer_empty{}{%
    \baaru:next_cell{\baaru:scan_state::empty}%
  }%
  \csname baaru:deactivate::line@#1@\baaru:cur_style\endcsname
  \baaru:validate_ncols
  \advance\baaru:curY\@ne
}
\def\baaru:validate_ncols{%
  \ifnum\baaru:ncols=\baaru:baseX
    \baaru:ncols\baaru:curX
  \else
    \ifnum\baaru:curX=\baaru:ncols\else
      \ifnum\baaru:curX>\baaru:ncols
        \BaaruError{Too many gloss cells, expected \the\baaru:ncols, found \the\baaru:curX}\@ehc
      \else
        \BaaruError{Not enough gloss cells, expected \the\baaru:ncols, found \the\baaru:curX}\@ehc
      \fi
    \fi
  \fi
}
\def\baaru:prep_for_gloss_row{%
  \baaru:if_in_ex{%
    \baaru:if_scanning{%
      \baaru:if_in_gloss{%
        \baaru:close_gloss_row
      }{%
        \baaru:close_to_outer
        \baaru:start_gloss
      }%
    }{%
      \baaru:init_scanning
      \baaru:start_gloss
    }%
  }{%
    \BaaruError{missing \string\ex}\@eha
  }%
}
\def\baaru:start_gloss{%
  \baaru:next_line\::baaru::glosspar
  \begingroup
  \csname baaru:activate::aligned@\baaru:cur_style\endcsname
  \let\baaru:close_to_outer\baaru:close_gloss
  \let\baaru:if_in_gloss\@firstoftwo
  \let\baaru:if_in_cells\@firstoftwo
  \baaru:ncols\z@
  \baaru:nrows\z@
  \baaru:curY\z@
  \baaru:n_multicols\z@
}
\def\baaru:close_gloss{%
  \baaru:close_gloss_row
  \ifnum\baaru:nrows=\z@
    \baaru:nrows\baaru:curY
  \else\ifnum\baaru:nrows=\baaru:curY\else
    \BaaruError{Mismatch in number of gloss rows}\@ehc
  \fi\fi
  \csname baaru:deactivate::scan@\baaru:cur_style\endcsname
  \csname baaru:deactivate::aligned@\baaru:cur_style\endcsname
  \usebaaruhook{everygloss}%
  \usebaaruhook{glossloaded}%
  \baaru:calc_col_widths
  \baaru:finish_multicol_cells
  \baaru:output_gloss
  \endgroup
}
\def\baaru:nlevel_line#1#2{%
  \baaru:prep_for_gloss_row
  \def\baaru:cur_nlevel{#1}%
  \let\baaru:if_in_nlevel\@firstoftwo
  \def\baaru:close_gloss_row{%
    \baaru:close_nlevel_rows
  }%
  \baaru:baseY\baaru:curY
  \baaru:curNlevelY\z@
  \baaru:lastNlevelY#2\relax
  \loop\ifnum\baaru:curNlevelY<\baaru:lastNlevelY
    \edef\baaru:cur_line{#1\baalph\baaru:curNlevelY}%
    \csletcs{baaru:cell_markup@\the\baaru:curY}{%
      baaru:markup::\baaru:cur_line @\baaru:cur_style
    }%
    \cslet{baaru:if_aligned::\the\baaru:curY}\@firstoftwo
    \advance\baaru:curY\@ne
    \advance\baaru:curNlevelY\@ne
  \repeat
  \baaru:curY\baaru:baseY
  \baaru:curNlevelY\z@
  \baaru:curX\baaru:baseX
  \baaru:init_coldata_id
  \edef\baaru:cur_line{#1a}%
  \csname baaru:activate::line@\baaru:cur_line @\baaru:cur_style\endcsname
  \ifnum\baaru:curX=\z@
    \usebaaruhook{every#1line}%
    \usebaaruhook{every#1aline}%
  \fi
  \baaru:insert_autocells
  \baaru:scan:start
}
\def\baaru:close_nlevel_rows{%
  \baaru:if_buffer_empty{}{%
    \baaru:next_cell{\baaru:scan_state::empty}%
  }%
  \ifnum\baaru:curNlevelY=\z@\else
    \BaaruError{Stranded nlevel cells (\the\baaru:curY\space extra)}\@ehc
  \fi
  \baaru:insert_autocells
  \csname baaru:deactivate::line@\baaru:cur_line @\baaru:cur_style\endcsname
  \let\baaru:if_in_nlevel\@secondoftwo
  \baaru:validate_ncols
  \advance\baaru:curY\baaru:lastNlevelY
}
\def\baaru:insert#1#2{%
  \baaru:prep_for_gloss_row
  \def\baaru:cur_line{#1}%
  \csdef{baaru:cell_markup@\the\baaru:curY}{#2}%
  \let\baaru:if_in_cells\@secondoftwo
  \cslet{baaru:if_aligned::\the\baaru:curY}\@secondoftwo
  \def\baaru:close_gloss_row{%
    \baaru:close_insert_row{#1}%
  }%
  \csname baaru:deactivate::aligned@\baaru:cur_style\endcsname
  \csname baaru:activate::line@#1@\baaru:cur_style\endcsname
  \baaru:blockno\z@
  \let\baaru:if_multicol\@secondoftwo
  \baaru:buffer={}%
  \ifnum\baaru:baseX=\z@
    \usebaaruhook{every#1line}%
  \fi
  \baaru:scan:start
}
\def\baaru:close_insert_row#1{%
  \csname baaru:deactivate::line@#1@\baaru:cur_style\endcsname
  \baaru:close_insert_block
  \advance\baaru:curY\@ne
  \let\baaru:if_in_cells\@firstoftwo
  \csname baaru:activate::aligned@\baaru:cur_style\endcsname
}
\def\baaru:close_insert_block{%
  \baaru:if_buffer_empty{}{%
    \csedef{baaru:insert_block::\the\baaru:curY @\the\baaru:blockno}{%
      \the\baaru:buffer
    }%
    \baaru:buffer={}%
    \let\baaru:if_buffered_space\@secondoftwo
    \let\baaru:scan_state\baaru:scan_state::empty
  }%
  \advance\baaru:blockno\@ne
}%
\def\mkbaarusidepanel#1{%
  \killbaarusidepanel
  \addbaaruhook{every#1line}{\baaru:make_side_panel}%
  \addbaaruhook{everyscan}{\baaru:side_panel}%
  \csdef{baaru:kill_side_panel_hook@\baaru:cur_style}{%
    \removebaaruhook{every#1line}{\baaru:make_side_panel}%
    \removebaaruhook{everyscan}{\baaru:side_panel}%
  }%
  \edef\:next{%
    \long\def\noexpand\baaru:side_panel####1\noexpand\baaru:scan:start####2\expandafter\noexpand\csname #1\endcsname{%
      \noexpand\baaru:side_panel@\expandafter\noexpand\csname#1\endcsname{%
        ####1%
      }{%
        ####2%
      }%
    }%
  }%
  \:next
}%
\def\killbaarusidepanel{%
  \ifcsdef{baaru:kill_side_panel_hook@\baaru:cur_style}{%
    \csname baaru:kill_side_panel_hook@\baaru:cur_style\endcsname
  }{}%
}
\def\::baaru:set::sidepanel#1{%
  \mkbaarusidepanel{#1}%
}
\let\::baaru:sw::nosidepanel\killbaarusidepanel
\csdef{::baaru:set::sidepanel.markup}#1{%
  \csdef{baaru:markup::sidepanel@\baaru:cur_style}{#1}%
}
\def\baaru:side_panel@#1#2#3{%
  \def\baaru:side_panel::prefix{#2}%
  \def\baaru:side_panel::content{#3}%
  \let\baaru:close_to_outer\relax
  \begingroup
  \csname baaru:activate::scan@\baaru:cur_style\endcsname
  \let\baaru:if_scanning\@firstoftwo
  \csname baaru:cmd::\string#1@\baaru:cur_style\endcsname
}%
\def\baaru:make_side_panel{%
  \def\baaru:close_to_outer{%
    \baaru:output_side_panel
    \endgroup
  }%
}%
\def\baaru:output_side_panel{%
  \baaru:sidepanel_width\::baaru::sidepanelratio\baaru:linewidth
  \baaru:width\baaru:linewidth
  \advance\baaru:width-\baaru:sidepanel_width
  \advance\baaru:width\::baaru::sidepaneloverhang\relax
  \begingroup
  \csname baaru:deactivate::scan@\baaru:cur_style\endcsname
  \csname baaru:deactivate::line@\baaru:cur_line @\baaru:cur_style\endcsname
  \ifvmode\leavevmode\fi
  \rlap{%
    \hspace*\baaru:width
    \csname baaru:markup::sidepanel@\baaru:cur_style\endcsname{%
      \parbox[t]{\baaru:sidepanel_width}{%
        \rightskip\::baaru::sidepanelflex\relax
        \baaru:if_has_suffix{%
          \baaru:line_markup{\the\baaru:cache}{\the\baaru:buffer}%
        }{%
          \baaru:line_markup{\the\baaru:buffer}{}%
        }%
      }%
    }%
  }%
  \advance\baaru:width-\::baaru::sidepanelsep\relax
  \edef\:cached_linewd{\the\baaru:linewidth}%
  \baaru:linewidth\baaru:width
  \baaru:parskip\parskip
  \begin{minipage}[t]{\baaru:linewidth}
    \parskip\baaru:parskip
    \parshape\@ne\@totalleftmargin\baaru:linewidth
    \let\baaruendleftpanel\:baaru:
    \let\baaru:if_preempt_newline\@firstoftwo
    \edef\:do{%
      \noexpand\baaru:side_panel::prefix
      \noexpand\expandafter\noexpand\baaru:scan:start\noexpand\scantokens{\expandonce\baaru:side_panel::content\noexpand\baaruendleftpanel}%
    }%
    \:do
  \end{minipage}%
  \endgroup
}
\csdef{baaru:cmd::\string\baaruendleftpanel}{%
  \baaru:close_to_outer
  \endgroup
}%
\def\baaru:next_coldata_id{%
  \edef\@tempa{\the\baaru:n_col_data}%
  \ifcsdef{baaru:coldata::wd@\@tempa}{}{%
    \expandafter\newdimen\csname baaru:coldata::gap@\@tempa\endcsname
    \expandafter\newdimen\csname baaru:coldata::wd@\@tempa\endcsname
    \expandafter\newdimen\csname baaru:coldata::leftmargin@\@tempa\endcsname
    \global\cslet{baaru:coldata::if_wrap@\@tempa}\@secondoftwo
    \global\cslet{baaru:coldata::if_nowrap@\@tempa}\@secondoftwo
    \global\cslet{baaru:coldata::if_autocell@\@tempa}\@secondoftwo
  }%
  \csname baaru:coldata::gap@\@tempa\endcsname\::baaru::cellspacing\relax
  \csedef{baaru:coldata::rank@\@tempa}{\the\baaru:n_regular_cols}%
  \csedef{baaru:coldata::id@\the\baaru:curX}{\@tempa}%
  \advance\baaru:n_regular_cols\@ne
  \advance\baaru:n_col_data\@ne
}
\def\baaru:init_coldata_id{%
  \ifcsdef{baaru:coldata::id@\the\baaru:curX}{}{%
    \baaru:next_coldata_id
  }%
  \edef\baaru:cur_coldata_id{\csname baaru:coldata::id@\the\baaru:curX\endcsname}%
}
\def\baaru:init_coldata_id@nocheck{%
  \edef\baaru:cur_coldata_id{\csname baaru:coldata::id@\the\baaru:curX\endcsname}%
}
\def\baaru:coldata::gap{%
  \csname baaru:coldata::gap@\baaru:cur_coldata_id\endcsname
}
\def\baaru:coldata::shrinkgap#1{%
  \ifdim#1<\csname baaru:coldata::gap@\baaru:cur_coldata_id\endcsname
    \csname baaru:coldata::gap@\baaru:cur_coldata_id\endcsname#1\relax
  \fi
}
\def\baaru:coldata::wd{%
  \csname baaru:coldata::wd@\baaru:cur_coldata_id\endcsname
}
\def\baaru:coldata::leftmargin{%
  \csname baaru:coldata::leftmargin@\baaru:cur_coldata_id\endcsname
}
\def\baaru:coldata::if_wrap{%
  \csname baaru:coldata::if_wrap@\baaru:cur_coldata_id\endcsname
}
\def\baaru:coldata::wrap{%
  \baaru:coldata::if_nowrap{%
    \BaaruError{Conflicting wrap requirements for column with ID \baaru:cur_coldata_id}\@eha
  }{}%
  \cslet{baaru:coldata::if_wrap@\baaru:cur_coldata_id}\@firstoftwo
}
\def\baaru:coldata::if_nowrap{%
  \csname baaru:coldata::if_nowrap@\baaru:cur_coldata_id\endcsname
}
\def\baaru:coldata::nowrap{%
  \baaru:coldata::if_wrap{%
    \BaaruError{Conflicting wrap requirements for column with ID \baaru:cur_coldata_id}\@eha
  }{}%
  \cslet{baaru:coldata::if_nowrap@\baaru:cur_coldata_id}\@firstoftwo
}
\def\baaru:coldata::if_autocell{%
  \csname baaru:coldata::if_autocell@\baaru:cur_coldata_id\endcsname
}
\def\baaru:coldata::if_auto_content{%
  \csname baaru:coldata::if_auto_content@\baaru:cur_coldata_id\endcsname
}
\def\baaru:coldata::set_auto#1{% #1, copy content or empty
  \cslet{baaru:coldata::if_autocell@\baaru:cur_coldata_id}\@firstoftwo
  \csdef{baaru:coldata::rank@\baaru:cur_coldata_id}{\m@ne}%
  \advance\baaru:n_regular_cols\m@ne
  \ifblank{#1}{%
    \cslet{baaru:coldata::if_auto_content@\baaru:cur_coldata_id}\@secondoftwo
  }{%
    \cslet{baaru:coldata::if_auto_content@\baaru:cur_coldata_id}\@firstoftwo
    \csdef{baaru:coldata::auto_content@\baaru:cur_coldata_id}{#1}%
  }%
}
\def\baaru:coldata::auto_content{%
  \csname baaru:coldata::auto_content@\baaru:cur_coldata_id\endcsname
}
\def\baaru:coldata::alignment{%
  \ifcsdef{baaru:coldata::alignment@\baaru:cur_coldata_id}{%
    \csname baaru:coldata::alignment@\baaru:cur_coldata_id\endcsname
  }{%
    l%
  }%
}
\def\baaru:coldata::set_alignment#1{%
  \csdef{baaru:coldata::alignment@\baaru:cur_coldata_id}{#1}%
}
\def\baaru:coldata::set_default_alignment#1{%
  \ifcsdef{csname baaru:coldata::alignment@\baaru:cur_coldata_id}{}{%
    \csdef{baaru:coldata::alignment@\baaru:cur_coldata_id}{#1}%
  }%
}
\def\baaru:coldata::rank{%
  \csname baaru:coldata::rank@\baaru:cur_coldata_id\endcsname
}
\def\baaru:next_cell#1{%
  \let\baaru:next_scan_state#1%
  \baaru:if_missing_cell_delim{%
    \BaaruError{Missing \string& between cells}\@ehd
  }{}%
  \baaru:if_in_nlevel{%
    \baaru:commit@nlevel
  }{%
    \baaru:commit@aligned
  }%
  \undef\baaru:buffered_cmd
  \baaru:buffer={}%
  \let\baaru:scan_state\baaru:next_scan_state
  \let\baaru:if_buffered_space\@secondoftwo
  \let\baaru:if_multicol\@secondoftwo
}
\def\baaru:if_missing_cell_delim{%
  \::baaru::if_explicitcells{%
    \csname baaru:scan_state::\baaru:next_scan_state @if_need_predelim\endcsname{%
      \csname baaru:scan_state::\baaru:scan_state @if_need_postdelim\endcsname{%
        \@firstoftwo
      }{%
        \@secondoftwo
      }%
    }{%
      \@secondoftwo
    }%
  }{%
    \@secondoftwo
  }%
}
\def\baaru:commit@aligned{%
  \ifdef\baaru:pre_cell_hook{%
    \baaru:pre_cell_hook
    \undef\baaru:pre_cell_hook
  }{}%
  \baaru:commit_cell
  \baaru:move_right_one_cell
  \ifdef\baaru:post_cell_hook{%
    \baaru:post_cell_hook
    \undef\baaru:post_cell_hook
  }{}%
  \baaru:insert_autocells
}
\def\baaru:commit@nlevel{%
  \ifdef\baaru:pre_cell_hook{%
    \baaru:pre_cell_hook
    \undef\baaru:pre_cell_hook
  }{}%
  \baaru:commit_cell
  \ifdef\baaru:post_cell_hook{%
    \baaru:cached_curX\baaru:curX
    \baaru:move_right_one_cell
    \baaru:post_cell_hook
    \undef\baaru:post_cell_hook
    \baaru:curX\baaru:cached_curX
    \baaru:init_coldata_id@nocheck
  }{}%
  \baaru:if_scan_state\baaru:next_scan_state\baaru:scan_state::empty{%
    \ifdef\baaru:anchoring_col{%
      \baaru:curX\baaru:anchoring_col\relax
      \baaru:init_coldata_id@nocheck
      \undef\baaru:anchoring_col
    }{}%
    \baaru:move_down_for_nlevel
  }{%
    \baaru:if_is_unglossed\baaru:scan_state{}{%
      \ifdef\baaru:anchoring_col{}{%
        \edef\baaru:anchoring_col{\the\baaru:curX}%
      }%
    }%
    \baaru:move_right_one_cell
    \baaru:skip_autocells
  }%
}
\def\baaru:move_right_one_cell{%
  \baaru:if_multicol{%
    \advance\baaru:curX\baaru:multicol_span
  }{%
    \advance\baaru:curX\@ne
  }%
  \baaru:init_coldata_id
}
\def\baaru:move_down_for_nlevel{%
  \csname baaru:deactivate::line@\baaru:cur_line @\baaru:cur_style\endcsname
  \baaru:if_skip_to_next_col{%
    \ifnum\baaru:curX=\z@
      \advance\baaru:curNlevelY\@ne
      \loop\ifnum\baaru:curNlevelY<\baaru:lastNlevelY
        \advance\baaru:curY\@ne
        \usebaaruhook{every\baaru:cur_nlevel\baalph\baaru:curNlevelY line}
        \advance\baaru:curNlevelY\@ne
      \repeat
    \else
      \baaru:curNlevelY\baaru:lastNlevelY
    \fi
    \let\baaru:if_skip_to_next_col\@secondoftwo
  }{%
    \advance\baaru:curY\@ne
    \advance\baaru:curNlevelY\@ne
  }%
  \ifnum\baaru:curNlevelY=\baaru:lastNlevelY
    \baaru:curY\baaru:baseY
    \baaru:curNlevelY\z@
    \advance\baaru:curX\@ne
    \baaru:init_coldata_id
    \baaru:insert_autocells
  \fi
  \edef\baaru:cur_line{\baaru:cur_nlevel\baalph\baaru:curNlevelY}%
  \csname baaru:activate::line@\baaru:cur_line @\baaru:cur_style\endcsname
  \ifnum\baaru:curX=\z@
    \usebaaruhook{every\baaru:cur_line line}%
  \fi
}
\def\baaru:pre_unglossed_cell_hook{%
  \baaru:if_multicol{%
    \BaaruError{Unglossed material specified as multicol}\@eha
    \let\baaru:if_multicol\@secondoftwo
  }{}%
  \baaru:if_in_nlevel{%
    \ifnum\baaru:curNlevelY=\z@
      \ifdef\baaru:anchoring_col{}{%
        \baaru:if_is_text\baaru:next_scan_state{}{%
          \ifcsdef{baaru:insertion_row::\expandafter\string\baaru:buffered_cmd @\baaru:cur_style}{%
            \baaru:curNlevelY\csname baaru:insertion_row::\expandafter\string\baaru:buffered_cmd @\baaru:cur_style\endcsname\relax
          }{}%
          \advance\baaru:curY\baaru:curNlevelY
          \let\baaru:if_skip_to_next_col\@firstoftwo
        }%
      }%
    \fi
    % this needs a check, but I'm not sure what will work
    % currently probably breaks getpos and colstyle
    \baaru:shift_for_unglossed
  }{%
    \ifnum\baaru:ncols>\z@
      \baaru:shift_for_unglossed
    \fi
  }%
  \expandafter\baaru:coldata::set_auto\expandafter{\baaru:auto_content}%
  \let\baaru:auto_content\@empty
}
\def\baaru:insert_autocells{%
  \baaru:coldata::if_autocell{%
    \baaru:coldata::if_auto_content{%
      \baaru:if_in_nlevel{%
        \baaru:counta\baaru:baseY
        \baaru:countb\z@
        \loop\ifnum\baaru:countb<\baaru:lastNlevelY
          \ifcsdef{baaru:multicol::base@\the\baaru:counta @\baaru:cur_coldata_id}{}{%
            \ifcsdef{baaru:cell::\the\baaru:counta @\baaru:cur_coldata_id}{}{%
              \csedef{baaru:cell::\the\baaru:counta @\baaru:cur_coldata_id}{%
                \expandafter\expandafter\expandafter\expandonce\baaru:coldata::auto_content
              }%
            }%
          }%
          \advance\baaru:counta\@ne
          \advance\baaru:countb\@ne
        \repeat
      }{%
        \csedef{baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id}{%
          \expandafter\expandafter\expandafter\expandonce\baaru:coldata::auto_content
        }%
      }%
    }{}%
    \advance\baaru:curX\@ne
    \baaru:init_coldata_id
    \baaru:insert_autocells
  }{}%
}
\def\baaru:skip_autocells{%
  \baaru:coldata::if_autocell{%
    \advance\baaru:curX\@ne
    \baaru:init_coldata_id
    \expandafter\baaru:skip_autocells
  }{}%
}%
\def\baaru:shift_for_unglossed{%
  \baaru:counta\baaru:ncols
  \ifnum\baaru:counta=\z@
    \advance\baaru:curX\@ne
    \baaru:init_coldata_id
    \baaru:counta\baaru:curX
    \advance\baaru:curX\m@ne
  \fi
  \baaru:countb\baaru:counta
  \loop\ifnum\baaru:counta>\baaru:curX
    \advance\baaru:countb\m@ne
    \csedef{baaru:coldata::id@\the\baaru:counta}{%
      \csname baaru:coldata::id@\the\baaru:countb\endcsname
    }%
    \advance\baaru:counta\m@ne
  \repeat
  \ifnum\baaru:ncols>\z@
    \advance\baaru:ncols\@ne
  \fi
  \csundef{baaru:coldata::id@\the\baaru:curX}%
  \baaru:init_coldata_id
  \advance\baaru:curX\@ne
  \baaru:init_coldata_id
  \edef\@tempa{\baaru:cur_coldata_id}%
  \advance\baaru:curX\m@ne
  \baaru:init_coldata_id@nocheck
  \csname baaru:coldata::if_wrap@\@tempa\endcsname{%
    \cslet{baaru:coldata::if_wrap@\baaru:cur_coldata_id}\@firstoftwo
    \cslet{baaru:coldata::if_wrap@\@tempa}\@secondoftwo
  }{}%
  \csname baaru:coldata::if_nowrap@\@tempa\endcsname{%
    \cslet{baaru:coldata::if_nowrap@\baaru:cur_coldata_id}\@firstoftwo
    \cslet{baaru:coldata::if_nowrap@\@tempa}\@secondoftwo
  }{}%
  \csname baaru:coldata::gap@\baaru:cur_coldata_id\endcsname\csname baaru:coldata::gap@\@tempa\endcsname
  \csname baaru:coldata::gap@\@tempa\endcsname\::baaru::cellspacing\relax
  % add the content
  \ifx\baaru:auto_content\@empty\else
    \baaru:counta\z@
    \baaru:if_in_nlevel{%
      \baaru:countb\baaru:baseY
      \advance\baaru:countb\baaru:lastNlevelY
    }{%
      \baaru:countb\baaru:curY
    }%
    \loop\ifnum\baaru:counta<\baaru:countb
      \ifnum\baaru:counta=\baaru:curY\else
        \ifcsdef{baaru:multicol::base@\the\baaru:counta @\baaru:cur_coldata_id}{}{%
          \csedef{baaru:cell::\the\baaru:counta @\baaru:cur_coldata_id}{\expandonce\baaru:auto_content}%
        }%
      \fi
      \advance\baaru:counta\@ne
    \repeat
  \fi
  % multicols
  \baaru:counta\z@
  \loop\ifnum\baaru:counta<\baaru:n_multicols
    \baaru:shift_multicol_for_unglossed
    \advance\baaru:counta\@ne
  \repeat
}
\def\baaru:shift_multicol_for_unglossed{%
  \ifnum\baaru:curX>\csname baaru:multicol_cell::start@\the\baaru:counta\endcsname
    \baaru:countb\csname baaru:multicol_cell::start@\the\baaru:counta\endcsname
    \advance\baaru:countb\csname baaru:multicol_cell::span@\the\baaru:counta\endcsname
    \ifnum\baaru:countb>\baaru:curX
      \baaru:coldata::nowrap
      \advance\csname baaru:multicol_cell::span@\the\baaru:counta\endcsname\@ne
    \fi
  \else
    \advance\csname baaru:multicol_cell::start@\the\baaru:counta\endcsname\@ne
  \fi
}
\def\baaru:commit_cell{%
  \baaru:if_multicol{%
    \csedef{baaru:multicol_cell::\the\baaru:n_multicols}{%
      \the\baaru:buffer
    }%
    \csedef{baaru:multicol_cell::id:\the\baaru:curY @\baaru:cur_coldata_id}{\the\baaru:n_multicols}%
    \ifcsdef{baaru:multicol_cell::start@\the\baaru:n_multicols}{}{%
      \expandafter\newcount\csname baaru:multicol_cell::start@\the\baaru:n_multicols\endcsname
      \expandafter\newcount\csname baaru:multicol_cell::span@\the\baaru:n_multicols\endcsname
    }%
    \csname baaru:multicol_cell::start@\the\baaru:n_multicols\endcsname\baaru:curX
    \csname baaru:multicol_cell::span@\the\baaru:n_multicols\endcsname\baaru:multicol_span
    \csedef{baaru:multicol_cell::row@\the\baaru:n_multicols}{\the\baaru:curY}%
    \advance\baaru:n_multicols\@ne
  }{%
    \baaru:if_buffer_empty{%
      \ifcsdef{baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id}{}{%
        \cslet{baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id}\@empty
      }%
    }{%
      \csedef{baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id}{%
        \the\baaru:buffer
      }%
    }%
  }%
}%
\def\baaru:calc_col_widths{%
  \baaru:curY\z@
  \loop\ifnum\baaru:curY<\baaru:nrows
    \csname baaru:if_aligned::\the\baaru:curY\endcsname{%
      \baaru:curX\z@
      \letcs\baaru:cell_markup{baaru:cell_markup@\the\baaru:curY}%
      \baaru:update_col_widths
    }{}%
    \advance\baaru:curY\@ne
  \repeat
}
\def\baaru:update_col_widths{%
  \ifnum\baaru:curX<\baaru:ncols
     \baaru:init_coldata_id@nocheck
    \ifcsdef{baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id}{%
      \sbox\z@{%
        \baaru:cell_markup{%
          \csname baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id\endcsname
        }%
      }%
      \ifdim\wd\z@>\baaru:coldata::wd
        \baaru:coldata::wd=\wd\z@
      \fi
      \csedef{baaru:natwd::\the\baaru:curY @\baaru:cur_coldata_id}{\the\wd\z@}%
      \advance\baaru:curX\@ne
    }{%
      \ifcsdef{baaru:multicol_cell::id:\the\baaru:curY @\baaru:cur_coldata_id}{%
        \edef\@tempa{\csname baaru:multicol_cell::id:\the\baaru:curY @\baaru:cur_coldata_id\endcsname}%
        \advance\baaru:curX \csname baaru:multicol_cell::span@\@tempa\endcsname\relax
      }{%
        \advance\baaru:curX\@ne
      }%
    }%
    \expandafter\baaru:update_col_widths
  \fi
}
\def\baaru:finish_multicol_cells{%
  \baaru:counta\z@
  \loop\ifnum\baaru:counta<\baaru:n_multicols
    \baaru:finish_multicol_cell
    \advance\baaru:counta\@ne
  \repeat
}
\def\baaru:finish_multicol_cell{%
  \begingroup
  \baaru:curX\csname baaru:multicol_cell::start@\the\baaru:counta\endcsname
  \baaru:cached_curX\baaru:curX
  \baaru:lastX\baaru:curX
  \advance\baaru:lastX\csname baaru:multicol_cell::span@\the\baaru:counta\endcsname
  \@tempdima\z@
  \let\baaru:if_suppress_colgap\@firstoftwo
  \loop\ifnum\baaru:curX<\baaru:lastX
    \baaru:init_coldata_id@nocheck
    \baaru:if_suppress_colgap{%
      \let\baaru:if_suppress_colgap\@secondoftwo
    }{%
      \advance\@tempdima\baaru:coldata::gap
    }%
    \advance\@tempdima\baaru:coldata::wd
    \advance\baaru:curX\@ne
  \repeat
  \sbox\z@{%
    \csname baaru:cell_markup@\csname baaru:multicol_cell::row@\the\baaru:counta\endcsname\endcsname{%
      \csname baaru:multicol_cell::\the\baaru:counta\endcsname
    }%
  }%
  \ifdim\wd\z@>\@tempdima
    \@tempdimb\wd\z@
    \advance\@tempdimb-\@tempdima
    \baaru:curX\baaru:lastX
    \advance\baaru:curX\m@ne % prev column
    \baaru:init_coldata_id@nocheck
    \edef\:cache_coldata_id{\baaru:cur_coldata_id}%
    \@tempdima\wd\z@
  \else
    \@tempdimb\z@
  \fi
  \baaru:curX\baaru:cached_curX
  \baaru:init_coldata_id@nocheck
  \xdef\:next{%
    \edef\noexpand\baaru:cur_coldata_id{\baaru:cur_coldata_id}%
    \def\expandafter\noexpand\csname baaru:multicol_cell::colwd@\the\baaru:counta\endcsname{%
      \the\@tempdima
    }%
    \def\expandafter\noexpand\csname baaru:natwd::\csname baaru:multicol_cell::row@\the\baaru:counta\endcsname @\baaru:cur_coldata_id\endcsname{%
      \the\wd\z@
    }%
    \ifdim\@tempdimb=\z@\else
      \advance\expandafter\noexpand\csname baaru:coldata::wd@\:cache_coldata_id\endcsname\the\@tempdimb\relax
    \fi
  }%
  \aftergroup\:next
  \endgroup
}
\def\baaru:output_gloss{%
  \baaru:curX\z@
  \baaru:blockno\z@
  \baaru:width\parshapelength\@ne
  \ifdim\::baaru::glossindent>\z@
    \baaru:indent\::baaru::glossindent\relax
    \advance\baaru:width-\::baaru::glossindent\relax
  \else
    \baaru:indent\z@
  \fi
  \baaru:output_gloss@
}
\def\baaru:output_gloss@{%
  \baaru:baseX\baaru:curX
  \baaru:init_coldata_id@nocheck
  \baaru:remaining_width\baaru:width
  \baaru:leftmargin\baaru:indent
  \let\baaru:if_suppress_colgap\@firstoftwo
  \baaru:fit_cols
  \usebaaruhook{glossoutput}%
  \baaru:curY\z@
  \let\baaru:if_first_row\@firstoftwo
  \loop\ifnum\baaru:curY<\baaru:nrows
    \baaru:curX\baaru:baseX
    \baaru:if_first_row{%
      \baaru:if_prefix_row{%
        \baaru:output_prefix_row
        \let\baaru:if_prefix_row\@secondoftwo
      }{%
        \baaru:output_gloss_row
        \baaru:if_did_output{%
          \let\baaru:if_first_row\@secondoftwo
        }{}%
      }%
    }{%
      \newline\null
      \baaru:output_gloss_row
    }%
    \advance\baaru:curY\@ne
  \repeat
  \baaru:curX\baaru:lastX
  \ifnum\baaru:curX<\baaru:ncols
    \expandafter\baaru:output_hanging
  \fi
}
\def\baaru:output_prefix_row{%
  \ifnum\baaru:curX=\z@
    \ifcsdef{baaru:judgment::\the\numexpr\baaru:curY+1}{%
      \baaru:judge{\csname baaru:judgment::\the\numexpr\baaru:curY+1\endcsname}%
      \csundef{baaru:judgment::\the\numexpr\baaru:curY+1}%
    }{}%
  \fi
  \ifvmode\leavevmode\fi
  \rlap{%
    \raisebox{\baselineskip}{%
      \baaru:output_gloss_row
    }%
  }%
}%
\def\baaru:output_gloss_row{%
  \ifdim\baaru:indent>\z@\hskip\baaru:indent\fi
  \ifnum\baaru:curX=\z@
    \ifcsdef{baaru:judgment::\the\baaru:curY}{%
      \baaru:judge{\csname baaru:judgment::\the\baaru:curY\endcsname}%
    }{}%
  \fi
  \ifvmode\leavevmode\fi
  \letcs\baaru:cell_markup{baaru:cell_markup@\the\baaru:curY}%
  \usebaaruhook{lineoutput}%
  \csname baaru:if_aligned::\the\baaru:curY\endcsname{%
    \baaru:output_cells_row
  }{%
    \baaru:output_insert_row
  }%
}
\def\baaru:output_hanging{%
  \par
  \advance\baaru:blockno\@ne
  \baaru:if_add_hangindent{%
    \advance\baaru:indent\::baaru::hangindent\relax
    \advance\baaru:width-\::baaru::hangindent\relax
  }{}%
  \baaru:output_gloss@
}
\def\baaru:if_add_hangindent{%
  \::baaru::if_cumulativehang{%
    \@firstoftwo
  }{%
    \ifnum\baaru:blockno=\@ne
      \expandafter\@firstoftwo
    \else
      \expandafter\@secondoftwo
    \fi
  }%
}
\def\baaru:fit_cols{%
  \baaru:fit_one_col
  \ifdim\baaru:remaining_width<\z@
    \PackageWarning{baarux}{not enough room for even one cell,\MessageBreak expect hbox badness}%
  \else
    \expandafter\baaru:fit_cols@iterate
  \fi
  \baaru:lastX\baaru:curX
}
\def\baaru:fit_one_col{%
  \baaru:if_suppress_colgap{%
    \let\baaru:if_suppress_colgap\@secondoftwo
  }{%
    \@tempdima\baaru:coldata::gap
    \advance\baaru:remaining_width-\@tempdima
    \advance\baaru:leftmargin\@tempdima
  }%
  \baaru:coldata::leftmargin\baaru:leftmargin
  \@tempdima\baaru:coldata::wd
  \advance\baaru:remaining_width-\@tempdima
  \advance\baaru:leftmargin\@tempdima
  \advance\baaru:curX\@ne
  \ifnum\baaru:curX<\baaru:ncols
    \baaru:init_coldata_id@nocheck
    \baaru:coldata::if_nowrap{%
      \expandafter\baaru:fit_one_col
    }{}%
  \fi
}
\def\baaru:fit_cols@iterate{%
  \ifnum\baaru:curX<\baaru:ncols
    \expandafter\baaru:fit_cols@iterate@
  \fi
}
\def\baaru:fit_cols@iterate@{%
  \baaru:coldata::if_wrap{}{%
    \baaru:cached_curX\baaru:curX
    \baaru:cached_width\baaru:remaining_width
    \baaru:fit_one_col
    \ifdim\baaru:remaining_width<\z@
      \baaru:if_shrink_gaps{%
        \baaru:update_multicol_wds
      }{%
        \baaru:curX\baaru:cached_curX
        \baaru:remaining_width\baaru:cached_width
        \::baaru::if_rightjustify{%
          \ifdim\baaru:remaining_width>\z@
            \baaru:stretch
            \baaru:update_multicol_wds
          \fi
        }{}%
      }{}%
    \else
      \expandafter\baaru:fit_cols@iterate
    \fi
  }%
}
\def\baaru:if_shrink_gaps{%
  \::baaru::if_rightjustify{%
    \baaru:gaps_total\z@
    \baaru:lastX\baaru:curX
    \baaru:curX\baaru:baseX
    \advance\baaru:curX\@ne
    \loop\ifnum\baaru:curX<\baaru:lastX
      \baaru:init_coldata_id@nocheck
      \advance\baaru:gaps_total\baaru:coldata::gap
      \advance\baaru:curX\@ne
    \repeat
    \baaru:max_delta_gaps \dimexpr \baaru:gaps_total * \::baaru::colgapshrink / -100\relax
    \ifdim\baaru:max_delta_gaps>\baaru:remaining_width % > because negative numbers
      \expandafter\@secondoftwo % failed
    \else
      \baaru:shrink_gaps
      \expandafter\@firstoftwo
    \fi
  }{%
    \@secondoftwo
  }%
}
\def\baaru:shrink_gaps{%
  \baaru:target_delta_gaps-\baaru:remaining_width
  \baaru:curX\baaru:baseX
  \baaru:leftmargin\baaru:indent
  \let\baaru:if_suppress_colgap\@firstoftwo
  \loop\ifnum\baaru:curX<\baaru:lastX
    \baaru:init_coldata_id@nocheck
    \advance\baaru:curX\@ne
    \baaru:if_suppress_colgap{%
      \let\baaru:if_suppress_colgap\@secondoftwo
    }{%
      \@tempdima\baaru:coldata::gap
      \ifdim\@tempdima>\z@
        \ifnum\baaru:curX=\baaru:lastX
          \@tempdimb \baaru:target_delta_gaps
        \else
          \@tempdimb \dimexpr \@tempdima * \baaru:target_delta_gaps / \baaru:gaps_total\relax
        \fi
        \advance\baaru:gaps_total-\@tempdima
        \advance\@tempdima-\@tempdimb
        \baaru:coldata::gap\@tempdima
        \advance\baaru:leftmargin\@tempdima
        \advance\baaru:target_delta_gaps-\@tempdimb
      \fi
    }%
    \baaru:coldata::leftmargin\baaru:leftmargin
    \advance\baaru:leftmargin\baaru:coldata::wd
  \repeat
}
\def\baaru:stretch{%
  \baaru:gaps_total\z@
  \baaru:cols_total\z@
  \baaru:lastX\baaru:curX
  \baaru:curX\baaru:baseX
  \let\baaru:if_suppress_colgap\@firstoftwo
  \loop\ifnum\baaru:curX<\baaru:lastX
    \baaru:init_coldata_id@nocheck
    \advance\baaru:curX\@ne
    \baaru:if_suppress_colgap{%
      \let\baaru:if_suppress_colgap\@secondoftwo
    }{%
      \advance\baaru:gaps_total\baaru:coldata::gap
    }%
    \ifnum\baaru:curX<\baaru:lastX
      \advance\baaru:cols_total\baaru:coldata::wd
    \fi
  \repeat
  \baaru:max_delta_gaps\dimexpr\baaru:gaps_total * \::baaru::colgapstretch / 100\relax
  \baaru:max_delta_cols\dimexpr\baaru:cols_total * \::baaru::colstretch / 100\relax
  \baaru:max_delta\dimexpr\baaru:max_delta_gaps + \baaru:max_delta_cols\relax
  \ifdim\baaru:max_delta>\baaru:remaining_width
    \baaru:target_delta\baaru:remaining_width
  \else
    \baaru:target_delta\baaru:max_delta
  \fi
  \ifdim\baaru:max_delta>\z@
    \expandafter\baaru:stretch@
  \fi
}
\def\baaru:stretch@{%
  \baaru:target_delta_gaps\dimexpr \baaru:max_delta_gaps * \baaru:target_delta / \baaru:max_delta\relax
  \baaru:target_delta_cols\dimexpr \baaru:target_delta - \baaru:target_delta_gaps\relax
  \baaru:curX\baaru:baseX
  \baaru:leftmargin\baaru:indent
  \let\baaru:if_suppress_colgap\@firstoftwo
  \loop\ifnum\baaru:curX<\baaru:lastX
    \baaru:init_coldata_id@nocheck
    \advance\baaru:curX\@ne
    \baaru:if_suppress_colgap{%
      \let\baaru:if_suppress_colgap\@secondoftwo
    }{%
      \@tempdima\baaru:coldata::gap
      \ifdim\@tempdima>\z@
        \ifnum\baaru:curX=\baaru:lastX
          \@tempdimb \baaru:target_delta_gaps
        \else
          \@tempdimb \dimexpr \@tempdima * \baaru:target_delta_gaps / \baaru:gaps_total\relax
        \fi
        \advance\baaru:gaps_total-\@tempdima
        \advance\@tempdima\@tempdimb
        \baaru:coldata::gap\@tempdima
        \advance\baaru:leftmargin\@tempdima
        \advance\baaru:target_delta_gaps-\@tempdimb
      \fi
    }%
    \baaru:coldata::leftmargin\baaru:leftmargin
    \@tempdima\baaru:coldata::wd
    \ifdim\@tempdima>\z@
      \ifnum\baaru:curX=\baaru:lastX\else % the last col can't expand
        \ifnum\baaru:lastX=\numexpr\baaru:curX+1\relax
          \@tempdimb \baaru:target_delta_cols
        \else
          \@tempdimb \dimexpr \@tempdima * \baaru:target_delta_cols / \baaru:cols_total\relax
        \fi
        \advance\baaru:cols_total-\@tempdima
        \advance \@tempdima \@tempdimb
        \baaru:coldata::wd\@tempdima
        \advance\baaru:leftmargin\@tempdima
        \advance\baaru:target_delta_cols-\@tempdimb
      \fi
    \fi
  \repeat
}
\def\baaru:update_multicol_wds{%
  \baaru:counta\z@
  \loop\ifnum\baaru:counta<\baaru:n_multicols
    \baaru:update_multicol_wd
    \advance\baaru:counta\@ne
  \repeat
}
\def\baaru:update_multicol_wd{%
  \begingroup
  \baaru:curX\csname baaru:multicol_cell::start@\the\baaru:counta\endcsname
  \ifnum\baaru:curX<\baaru:lastX
    \baaru:countb\baaru:curX
    \advance\baaru:countb\csname baaru:multicol_cell::span@\the\baaru:counta\endcsname
    \ifnum\baaru:countb>\baaru:baseX
      \baaru:cached_curX\baaru:curX
      \@tempdima\z@
      \let\baaru:if_suppress_colgap\@firstoftwo
      \loop\ifnum\baaru:curX<\baaru:countb
        \baaru:init_coldata_id@nocheck
        \baaru:if_suppress_colgap{%
          \let\baaru:if_suppress_colgap\@secondoftwo
        }{%
          \advance\@tempdima\baaru:coldata::gap
        }%
        \advance\@tempdima\baaru:coldata::wd
        \advance\baaru:curX\@ne
      \repeat
      \baaru:curX\baaru:cached_curX
      \baaru:init_coldata_id@nocheck
      \ifdim\@tempdima<\csname baaru:natwd::\csname baaru:multicol_cell::row@\the\baaru:counta\endcsname @\baaru:cur_coldata_id\endcsname
        \PackageWarning{baarux}{Right justification has made a multicolumn
          cell\MessageBreak too small for its contents. If the results are
          \MessageBreak bade, maybe use the setting norightjustify}%
      \fi
      \xdef\:next{%
        \def\expandafter\noexpand\csname baaru:multicol_cell::colwd@\the\baaru:counta\endcsname{%
          \the\@tempdima
        }%
      }%
      \aftergroup\:next
    \fi
  \fi
  \endgroup
}
\def\baaru:output_cells_row{%
  \begingroup
    \let\baaru:if_suppress_colgap\@firstoftwo
    \loop\ifnum\baaru:curX<\baaru:lastX
      \baaru:output_cell
    \repeat
  \endgroup
  \let\baaru:if_did_output\@firstoftwo
}
\def\baaru:output_cell{%
  \baaru:gather_cell_data
  \ifdim\baaru:cellskip>\z@\hskip\baaru:cellskip\fi
  \ifdef\baaru:cellcontent{%
    \makebox[\the\baaru:cellwidth][\baaru:alignment]{\baaru:cell_markup{\baaru:cellcontent}}%
  }{%
    \makebox[\the\baaru:cellwidth][l]{}%
  }%
  \baaru:curX\baaru:nextX
}
\def\baaru:buffer_cell{%
  \baaru:gather_cell_data
  \edef\:next{%
    \baaru:buffer={%
      \the\baaru:buffer
      \ifdim\baaru:cellskip>\z@\noexpand\hskip\the\baaru:cellskip\relax\fi
      \ifdef\baaru:cellcontent{%
        \noexpand\makebox[\the\baaru:cellwidth][\baaru:alignment]{\expandonce\baaru:cell_markup{\expandonce\baaru:cellcontent}}%
      }{%
        \noexpand\makebox[\the\baaru:cellwidth][l]{}%
      }%
    }%
  }%
  \:next
}%
\def\baaru:gather_cell_data{%
  \baaru:init_coldata_id@nocheck
  \baaru:if_suppress_colgap{%
    \let\baaru:if_suppress_colgap\@secondoftwo
    \baaru:cellskip\z@
  }{%
    \baaru:cellskip\baaru:coldata::gap
  }%
  \baaru:nextX\baaru:curX
  \ifcsdef{baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id}{%
    \baaru:cellwidth\baaru:coldata::wd
    \edef\baaru:alignment{\baaru:coldata::alignment}%
    \letcs\baaru:cellcontent{baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id}%
    \advance\baaru:nextX\@ne
  }{%
    \ifcsdef{baaru:multicol_cell::id:\the\baaru:curY @\baaru:cur_coldata_id}{%
      \edef\baaru:multicolno{\csname baaru:multicol_cell::id:\the\baaru:curY @\baaru:cur_coldata_id\endcsname}%
      \baaru:cellwidth\csname baaru:multicol_cell::colwd@\baaru:multicolno\endcsname
      \def\baaru:alignment{l}%
      \letcs\baaru:cellcontent{baaru:multicol_cell::\baaru:multicolno}%
      \advance\baaru:nextX\csname baaru:multicol_cell::span@\baaru:multicolno\endcsname
    }{%
      \baaru:cellwidth\baaru:coldata::wd
      \def\baaru:alignment{l}%
      \undef\baaru:cellcontent
      \advance\baaru:nextX\@ne
    }%
  }%
}
\def\baaru:output_insert_row{%
  \ifcsdef{baaru:insert_block::\the\baaru:curY @\the\baaru:blockno}{%
    \baaru:cell_markup{%
      \csname baaru:insert_block::\the\baaru:curY @\the\baaru:blockno\endcsname
    }%
    \let\baaru:if_did_output\@firstoftwo
  }{%
    \let\baaru:if_did_output\@secondoftwo
  }%
}%
\def\baarusetupcol#1{%
  \baaru:if_in_cells{%
    \baaru:if_in_nlevel{%
      \::baaru::if_explicitcells{%
        \baaru:next_cell{\baaru:scan_state::empty}%
      }{%
        \baaru:if_buffer_empty{}{%
          \baaru:next_cell{\baaru:scan_state::empty}%
        }%
      }%
      \ifnum\baaru:curNlevelY=\z@\else
        \BaaruError{Stranded nlevel cells (\the\baaru:curY\space extra)}\@ehc
      \fi
    }{%
      \::baaru::if_explicitcells{%
        \baaru:next_cell{\baaru:scan_state::empty}%
      }{%
        \baaru:if_buffer_empty{}{%
          \baaru:next_cell{\baaru:scan_state::empty}%
        }%
      }%
    }%
    #1%
    \baaru:scan
  }{%
    \BaaruError{\string\baarusetupcol\space can be used only in gloss rows}@eha
  }%
}
\def\baaruwrap{%
  \baarusetupcol\baaru:coldata::wrap
}
\def\baarunowrap{%
  \baarusetupcol\baaru:coldata::nowrap
}
\def\baarucolgap#1{%
  \baarusetupcol{\baaru:coldata::gap #1\relax}%
}
\def\baaruendcol{%
  \baaru:if_in_nlevel{%
    \::baaru::if_explicitcells{%
      \baaru:next_cell{\baaru:scan_state::empty}%
    }{%
      \baaru:if_buffer_empty{}{%
        \baaru:next_cell{\baaru:scan_state::empty}%
      }%
    }%
    \ifnum\baaru:curNlevelY=\z@\else
      \BaaruError{Stranded nlevel cells (\the\baaru:curY\space extra)}\@ehc
    \fi
    \@ifstar{\baaru:coldata::wrap\baaru:scan}\baaru:scan
  }{%
    \BaaruError{\string\baaruedcol\space can be used only in nlevel glosses}\@eha
  }%
}%
\def\baarualign#1{%
  \baaru:if_in_cells{%
    \ifcsdef{baaru:adjust_point@#1@l}{%
      \baaru:coldata::set_alignment{#1}%
    }{%
      \BaaruError{Unknown alignment `#1'}\@eha
    }%
    \baaru:scan
  }{%
    \BaaruError{\string\baarualign\space can be used only in gloss rows}\@eha
  }%
}
\def\baarumulticol#1{%
  \baaru:if_in_cells{%
    \let\baaru:if_multicol\@firstoftwo
    \let\:base_col\baaru:cur_coldata_id
    \baaru:multicol_span#1\relax
    \baaru:cached_curX\baaru:curX
    \baaru:countb\@ne
    \advance\baaru:curX\@ne
    \loop\ifnum\baaru:countb<\baaru:multicol_span\relax
      \baaru:init_coldata_id
      \baaru:coldata::nowrap
      \baaru:coldata::if_autocell{%
        \advance\baaru:multicol_span\@ne
      }{}%
      \csedef{baaru:multicol::base@\the\baaru:curY @\baaru:cur_coldata_id}{\:base_col}%
      \advance\baaru:curX\@ne
      \advance\baaru:countb\@ne
    \repeat
    \baaru:curX\baaru:cached_curX
    \baaru:init_coldata_id
    \baaru:scan
  }{%
    \BaaruError{\string\baarumulticol\space can be used only in gloss rows}\@eha
  }%
}
\def\baarucontd{%
  \baaru:if_in_gloss{%
    \baaru:close_gloss_row
    \baaru:curY\z@
    \baaru:baseX\baaru:ncols
    \let\baaru:close_gloss_row\relax
    \@ifstar{\baaru:coldata::wrap\baaru:scan}{\baaru:scan}%
  }{%
    \BaaruError{\string\baarucontd\space can be used only in glosses}\@eha
  }%
}%
\def\baarupar{%
  \baaru:close_to_outer
  \par\nobreak
  \global\let\baaru:if_preempt_newline\@firstoftwo
  \let\baaru:close_to_outer\relax
  \baaru:scan
}
\def\baaru:update_data_list#1#2#3#4{%
  \expandafter\def\expandafter\:list\expandafter{\csname #1\endcsname}%
  \expandafter\ifx\:list\relax
    \edef\:next{%
      \noexpand\addbaaruhook{#2output}{%
        \noexpand\baaru:yield_block_data{\noexpand#3}{\expandonce\:list}%
      }%
    }%
    \:next
    \expandafter\edef\:list{%
      {\baaru:cur_coldata_id}{#4}%
    }%
  \else
    \expandafter\edef\:list{%
      \expandafter\expandonce\:list
      {\baaru:cur_coldata_id}{#4}%
    }%
  \fi
}
\def\baaru:yield_block_data#1#2{%
  \ifx#2\@empty\else
    \baaru:buffer{}%
    \baaru:ensure_col_lookup
    \expandafter\baaru:yield_block_data@#2\:delim#2%
    \expandafter#1\expandafter{\the\baaru:buffer}%
  \fi
}
\def\baaru:yield_block_data@#1#2#3\:delim#4{%
  \ifnum#1<\baaru:lastX
    \baaru:buffer=\expandafter{\the\baaru:buffer\do#2}%
    \ifblank{#3}{%
      \let#4\@empty
    }{%
      \baaru:yield_block_data@#3\:delim#4%
    }%
  \else
    \def#4{{#1}{#2}#3}%
  \fi
}
\def\baaru:ensure_col_lookup{%
  \ifdef\baaru:col_lookup{}{%
    \baaru:curX\z@
    \loop\ifnum\baaru:curX<\baaru:ncols
      \baaru:init_coldata_id@nocheck
      \csedef{baaru:col::\baaru:cur_coldata_id}{\the\baaru:curX}%
      \advance\baaru:curX\@ne
    \repeat
    \let\baaru:col_lookup\relax
  }%
}
\def\baarugetpos#1{%
  \baaru:if_in_cells{%
    \baaru:if_optarg{\baarugetpos@{#1}}{\baarugetpos@{#1}c}%
  }{%
    \BaaruError{\string\baarugetpos\space can be used only in gloss rows}\@eha
  }%
}
\def\baarugetpos@#1#2{%
  \expandafter\baaru:getpos\csname \::baaru::pointprefix#1\endcsname{#2}%
  \baaru:scan
}
\def\baaru:getpos#1#2{%
  \ifcsdef{baaru:adjust_point@l@#2}{%
    \ifx#1\relax\newdimen#1\fi
    \appto\baaru:pre_cell_hook{%
      \baaru:update_data_list{baaru:point_requests}{gloss}{\baaru:resolve_point_requests}{#1#2{\baaru:cur_coldata_id}{\the\baaru:curY}}%
    }%
  }{%
    \BaaruError{Unknown point alignment `#2'}\@eha
  }%
}
\def\baaru:resolve_point_requests#1{%
  \let\do\baaru:resolve_point
  #1%
}
\def\baaru:resolve_point#1#2#3#4{%
  \baaru:curY#4\relax
  \def\baaru:cur_coldata_id{#3}%
  \global#1\baaru:coldata::leftmargin
  \advance#1-\::baaru::glossindent\relax
  \csname baaru:adjust_point@\baaru:coldata::alignment @#2\endcsname#1%
}
\def\baaru:adjust_point@l@l#1{}%
\def\baaru:adjust_point@l@L#1{}%
\def\baaru:adjust_point@l@r#1{%
  \baaru:set_natwd\@tempdima
  \global\advance#1\@tempdima
}%
\def\baaru:adjust_point@l@R#1{%
  \baaru:set_fullwd\@tempdima
  \global\advance#1\@tempdima
}%
\def\baaru:adjust_point@l@c#1{%
  \baaru:set_natwd\@tempdima
  \divide\@tempdima by2\relax
  \global\advance#1\@tempdima
}
\def\baaru:adjust_point@l@C#1{%
  \baaru:set_fullwd\@tempdima
  \divide\@tempdima by2\relax
  \global\advance#1\@tempdima
}
\def\baaru:adjust_point@r@l#1{%
  \baaru:set_fullwd\@tempdima
  \global\advance#1\@tempdima
  \baaru:set_natwd\@tempdima
  \global\advance#1-\@tempdima
}%
\def\baaru:adjust_point@r@L#1{}%
\def\baaru:adjust_point@r@r#1{%
  \baaru:set_fullwd\@tempdima
  \global\advance#1\@tempdima
}
\def\baaru:adjust_point@r@R#1{%
  \baaru:set_fullwd\@tempdima
  \global\advance#1\@tempdima
}
\def\baaru:adjust_point@r@c#1{%
  \baaru:set_fullwd\@tempdima
  \global\advance#1\@tempdima
  \baaru:set_natwd\@tempdima
  \divide\@tempdima by \tw@
  \global\advance#1-\@tempdima
}
\def\baaru:adjust_point@r@C#1{%
  \baaru:set_fullwd\@tempdima
  \divide\@tempdima by2\relax
  \global\advance#1\@tempdima
}
\def\baaru:adjust_point@c@l#1{%
  \baaru:set_fullwd\@tempdima
  \baaru:set_natwd\@tempdimb
  \advance\@tempdima-\@tempdimb
  \divide\@tempdima by \tw@
  \global\advance#1\@tempdima
}
\def\baaru:adjust_point@c@L#1{}%
\def\baaru:adjust_point@c@r#1{%
  \baaru:set_fullwd\@tempdima
  \baaru:set_natwd\@tempdimb
  \advance\@tempdima\@tempdimb
  \divide\@tempdima by \tw@
  \global\advance#1\@tempdima
}%
\def\baaru:adjust_point@c@R#1{%
  \baaru:set_fullwd\@tempdima
  \global\advance#1\@tempdima
}
\def\baaru:adjust_point@c@c#1{%
  \baaru:set_fullwd\@tempdima
  \divide\@tempdima by \tw@
  \global\advance#1\@tempdima
}
\def\baaru:adjust_point@c@C#1{%
  \baaru:set_fullwd\@tempdima
  \divide\@tempdima by \tw@
  \global\advance#1\@tempdima
}
\def\baaru:set_natwd#1{%
  \ifcsdef{baaru:natwd::\the\baaru:curY @\baaru:cur_coldata_id}{%
    #1\csname baaru:natwd::\the\baaru:curY @\baaru:cur_coldata_id\endcsname
  }{%
    \ifcsdef{baaru:multicol::base@\the\baaru:curY @\baaru:cur_coldata_id}{%
      \baaru:counta\csname baaru:multicol::base@\the\baaru:curY @\baaru:cur_coldata_id\endcsname
      #1\csname baaru:natwd::\the\baaru:curY @\the\baaru:counta\endcsname
    }{%
      #1\z@
    }%
  }%
}
\def\baaru:set_fullwd#1{%
  \ifcsdef{baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id}{%
    #1\baaru:coldata::wd
  }{%
    \ifcsdef{baaru:multicol::base@\the\baaru:curY @\baaru:cur_coldata_id}{%
      #1\csname baaru:multicol_cell::colwd@\baaru:multicolno\endcsname
    }{%
      \BaaruError{Seeking the position of a nonexistent cell}\@ehd
      #1\z@
    }%
  }%
}%
\AtBeginDocument{%
  \baaru:def_split_arg
}
\def\baaru:def_split_arg{%
  \expandafter\baaru:def_split_arg@\baaru:optarg
}
\def\baaru:def_split_arg@#1{%
  \def\baarusplitarg##1##2{%
    \baaru:split_arg##2#1\:delim{##1}%
  }%
  \def\baaru:split_arg##1#1##2\:delim##3{%
    \ifblank{##2}{%
      ##3{##1}{}%
    }{%
      \baaru:split_arg@{##3}{##1}##2\:delim
    }%
  }%
  \def\baaru:split_arg@##1##2##3#1\:delim{%
    ##1{##2}{##3}%
  }%
}
\def\baarudatapt#1#2{% #1, consumer; #2, data+segment
  \baaru:if_in_cells{%
    \begingroup
    \csname baaru:deactivate::scan@\baaru:cur_style\endcsname
    \csname baaru:deactivate::aligned@\baaru:cur_style\endcsname
    \csname baaru:deactivate::line@\baaru:cur_line @\baaru:cur_style\endcsname
    \expandafter\baaru:datapt\expandafter#1\scantokens{#2\baaruendscan}%
  }{%
    \BaaruError{\string\baarudatapt\space can be used only in gloss rows}\@eha
  }%
}
\def\baaru:datapt#1#2\baaruendscan{%
  \endgroup
  \baarusplitarg{\baaru:datapt@#1}{#2}%
}
\def\baaru:datapt@{%
  \advance\baaru:autoidx\@ne
  \expandafter\baaru:datapt@@\csname auto\::baaru::pointprefix\the\baaru:autoidx\endcsname
}
\def\baaru:datapt@@#1#2#3#4{% #1, point; #2, consumer; #3, data; #4, segment
  \ifblank{#4}{%
    \baaru:if_buffer_empty{%
      \def\:align{l}%
      \let\baaru:if_close_this_cell\@secondoftwo
    }{%
      \def\:align{r}%
      \let\baaru:if_close_this_cell\@firstoftwo
    }%
  }{%
    \baaru:if_buffer_empty{}{%
      \baaru:next_cell{\baaru:scan_state::empty}%
      \baaru:coldata::gap\z@
      \baaru:coldata::nowrap
    }%
    \baaru:add_to_buffer{#4}%
    \edef\:align{c}%
    \let\baaru:if_close_this_cell\@firstoftwo
  }%
  \expandafter\baaru:getpos\expandafter#1\:align
  \baaru:update_data_list{baaru:points::\string#2@\the\baaru:curY}{line}{#2}{#1{#3}}%
  \baaru:if_close_this_cell{%
    \baaru:next_cell{\baaru:scan_state::empty}%
    \futurelet\:token\baaru:datapt@@@
  }{%
    \baaru:scan
  }%
}
\def\baaru:datapt@@@{%
  \ifx\:token\@sptoken\else
    \baaru:coldata::gap\z@
    \baaru:coldata::nowrap
  \fi
  \baaru:scan
}
\newbaaruparam{tonevalue}{0.5ex}
\newdimen\baaru:tonevalue
\newtoks\baaru:contour
\def\baarudrawcontour#1{%
  \let\baaru:if_connected\@secondoftwo
  \baaru:tonevalue\baaruuse{tonevalue}%
  \baaru:contour{\draw (0,0)}%
  \let\do\baarucontourpoint
  #1%
  \rlap{%
    \raisebox{\baselineskip}{%
      \tikz[baaru,baarucontour]{%
        { \the\baaru:contour ; }
      }%
    }%
  }%
}
\def\baarucontourpoint#1#2{%
  \baaru:contourpoint#1#2\@delim
}
\def\baaru:contourpoint#1{%
  \@ifstar{%
    \baaru:contourpoint@\@firstoftwo#1%
  }{%
    \baaru:contourpoint@\@secondoftwo#1%
  }%
}
\def\baaru:contourpoint@#1{%
  \baaru:if_connected{%
    #1{%
      \baaru:contourpoint@@{}%
    }{%
      \baaru:contourpoint@@{--}%
    }%
  }{%
    \let\baaru:if_connected\@firstoftwo
    \baaru:contourpoint@@{}%
  }%
}
\def\baaru:contourpoint@@#1#2#3\@delim{%
  \baaru:contour=\expandafter{\the\baaru:contour#1(#2,#3\baaru:tonevalue)}%
}
\def\baaruspan#1{%
  \baaru:if_in_cells{%
    \baaru:if_buffer_empty{}{%
      \::baaru::if_explicitcells{%
        \baaru:if_is_unglossed\baaru:scan_state{}{%
          \BaaruError{\string\baaruspan\space in nonempty cell}\@eha
        }%
      }{%
        \baaru:next_cell{\baaru:scan_state::empty}%
      }%
    }%
    \@ifstar{%
      \baaruspan@0#1%
    }{%
      \baaruspan@1#1%
    }%
  }{%
    \BaaruError{\string\baaruspan\space may be used only in gloss rows}\@eha
  }%
}
\def\baaruspan@#1#2{%
  \advance\baaru:autoidx\@ne
  \baaru:counta\baaru:autoidx
  \advance\baaru:autoidx\@ne
  \expandafter\baaru:span%
  \csname auto\::baaru::pointprefix\expandafter\@alph\baaru:counta\expandafter\endcsname
  \csname auto\::baaru::pointprefix\expandafter\@alph\baaru:autoidx\endcsname
  #1#2%
}
\def\baaru:span#1#2#3#4#5{%
  \ifx#1\relax
    \newdimen#1%
  \fi
  \ifx#2\relax
    \newdimen#2%
  \fi
  \baaru:add_to_buffer{\baaru:with_width#1#2{#4}}%
  \let\baaru:scan_state\baaru:scan_state::prefix
  \let\baaruunspan\:baaru:
  \baaru:getpos#1l%
  \expandafter\baaru:scan\scantokens{#5\baaruunspan#3#2}%
}
\csdef{baaru:cmd::\string\baaruunspan}#1#2{%
  \ifnum#1=1\relax
    \baaru:getpos#2R%
  \else
    \baaru:getpos#2r%
  \fi
  \baaru:scan
}
\def\baaru:with_width#1#2#3{%
  #1\dimexpr#2-#1\relax
  #3#1%
}
\def\baarustrikeout{%
  \baaruspan\baaru:strikeout
}
\def\baaru:strikeout#1{%
  \rlap{%
    \null
    \::baaru::strikeoutstyle{%
      \leaders\hrule
      \@depth\dimexpr\::baaru::linewd-\::baaru::strikeht
      \@height\::baaru::strikeht\relax
      \hskip#1%
    }%
  }%
}
\def\baaruunderline{%
  \baaruspan\baaru:underline
}
\def\baaru:underline#1{%
  \rlap{%
    \null
    \::baaru::ulstyle{%
      \leaders\hrule
      \@depth\::baaru::uldp
      \@height\dimexpr\::baaru::linewd-\::baaru::uldp\relax
      \hskip#1%
    }%
  }%
}
\def\baarubox{%
  \baaruspan\baaru:box
}%
\def\baaru:box#1{%
  \llap{%
    \makebox[\dimexpr\fboxsep+\fboxrule][l]{%
      \::baaru::box{\strut\hskip#1}%
    }%
  }%
}
\def\baarunogloss#1{%
  \baaru:if_buffer_empty{%
    \baaru:buffer={#1}%
    \let\baaru:scan_state\baaru:scan_state::nogloss
  }{%
    \baaru:if_scan_state\baaru:scan_state\baaru:scan_state::prefix{%
      \baaru:buffer=\expandafter{\the\baaru:buffer#1}%
      \let\baaru:scan_state\baaru:scan_state::nogloss
    }{%
      \baaru:next_cell{\baaru:scan_state::nogloss}%
      \baaru:buffer={#1}%
    }%
  }%
  \let\baaru:buffered_cmd\baaru:cur_cmd
  \def\baaru:pre_cell_hook{%
    \baaru:pre_unglossed_cell_hook
  }%
  \baaru:scan
}
\def\baaruemptyelement#1{%
  \baaru:if_optarg{\baaru:emptyelement{#1}}{\baaru:emptyelement{#1}{}}%
}
\def\baaru:emptyelement#1#2{%
  \baarunogloss{\::baaru::emptyelement{#1}{#2}}%
}%
\def\::baaru::emptyelement#1#2{%
  \::baaru::emptyelementstyle{#1}%
  \ifblank{#2}{}{%
    \::baaru::emptyelementsub{#2}%
  }%
}
\def\baaruopenbracket{%
  \@ifstar{\baaru:openbracket}{\baaru:openbracket\::baaru::bracketsep}%
}
\def\baaru:openbracket#1#2{%
  \baaru:if_optarg{\baaru:openbracket@{#1}{#2}}{\baaru:openbracket@{#1}{#2}{}}%
}
\def\baaru:openbracket@#1#2#3{%
  \baaru:if_buffer_empty{%
    \let\baaru:scan_state\baaru:scan_state::openbracket
  }{%
    \baaru:next_cell{\baaru:scan_state::openbracket}%
  }%
  \baaru:buffer={\::baaru::openbracket{#2}{#3}}%
  \let\baaru:buffered_cmd\baaru:cur_cmd
  \def\baaru:pre_cell_hook{%
    \baaru:pre_unglossed_cell_hook
  }%
  \def\baaru:post_cell_hook{%
    \baaru:coldata::shrinkgap{#1}%
    \baaru:coldata::nowrap
  }%
  \::baaru::if_copybrackets{%
    \def\baaru:auto_content{%
      \::baaru::openbracket{#2}{}%
    }%
  }{}%
  \baaru:scan
}
\def\baaruclosebracket{%
  \@ifstar{\baaru:closebracket}{\baaru:closebracket\::baaru::bracketsep}%
}
\def\baaru:closebracket#1#2{%
  \baaru:if_optarg{\baaru:closebracket@{#1}{#2}}{\baaru:closebracket@{#1}{#2}{}}%
}
\def\baaru:closebracket@#1#2#3{%
  \baaru:if_buffer_empty{%
    \let\baaru:scan_state\baaru:scan_state::closebracket
  }{%
    \baaru:next_cell{\baaru:scan_state::closebracket}%
  }%
  \baaru:buffer={\::baaru::closebracket{#2}{#3}}%
  \let\baaru:buffered_cmd\baaru:cur_cmd
  \def\baaru:pre_cell_hook{%
    \baaru:pre_unglossed_cell_hook
    \baaru:coldata::shrinkgap{#1}%
    \baaru:coldata::nowrap
  }%
  \::baaru::if_copybrackets{%
    \def\baaru:auto_content{%
      \::baaru::closebracket{#2}{}%
    }%
  }{}%
  \baaru:scan
}
\def\baarujuncture{%
  \@ifstar{\baaru:juncture}{\baaru:juncture\::baaru::junctureinnersep\::baaru::junctureoutersep}%
}
\def\baaru:juncture#1#2#3{%
  \def\:next{%
    \baaru:juncture@{#1}{#2}{#3}%
  }%
  \futurelet\:token\:next
}
\def\baaru:juncture@#1#2#3{%
  \::baaru::if_explicitcells{%
    \baaru:if_buffered_space{%
      \BaaruError{Missing \string&\space before juncture}\@ehd
    }{}%
    \if\:token&\let\:token\@sptoken\fi
  }{}%
  \baaru:if_buffer_empty{%
    \let\baaru:scan_state\baaru:scan_state::juncture
    \def\baaru:pre_cell_hook{%
      \baaru:pre_unglossed_cell_hook
      \baaru:coldata::shrinkgap{#2}%
    }%
  }{%
    \::baaru::if_justifyforjuncture{%
      \ifcsdef{baaru:coldata::alignment@\baaru:cur_coldata_id}{}{%
        \::baaru::if_copyjunctures{%
          \baaru:coldata::set_default_alignment{r}%
        }{%
          \baaru:buffer=\expandafter{\expandafter\hfill\the\baaru:buffer}%
        }%
      }%
    }{}%
    \baaru:next_cell{\baaru:scan_state::juncture}%
    \def\baaru:pre_cell_hook{%
      \baaru:pre_unglossed_cell_hook
      \baaru:coldata::shrinkgap{#1}%
      \baaru:coldata::nowrap
    }%
  }%
  \baaru:buffer={\::baaru::juncture{#3}}%
  \let\baaru:buffered_cmd\baaru:cur_cmd
  \if\:token\@sptoken
    \def\baaru:post_cell_hook{%
      \baaru:coldata::shrinkgap{#2}%
    }%
  \else
    \def\baaru:post_cell_hook{%
      \baaru:coldata::shrinkgap{#1}%
      \baaru:coldata::nowrap
    }%
  \fi
  \::baaru::if_copyjunctures{%
    \def\baaru:auto_content{%
      \::baaru::juncture{#3}%
    }%
  }{}%
  \baaru:scan
}
\def\baarudelim{%
  \@ifstar{\baaru:delim}{\baaru:delim\::baaru::delimsep}%
}
\def\baaru:delim#1#2{%
  \baaru:if_buffer_empty{%
    \let\baaru:scan_state\baaru:scan_state::delim
    \baaru:buffer={\::baaru::delim{#2}}%
  }{%
    \baaru:if_scan_state\baaru:scan_state\baaru:scan_state::prefix{%
      \baaru:buffer=\expandafter{\the\baaru:buffer\::baaru::delim{#2}}%
      \let\baaru:scan_state\baaru:scan_state::delim
    }{%
      \baaru:next_cell{\baaru:scan_state::delim}%
      \baaru:buffer={\::baaru::delim{#2}}%
    }%
  }%
  \let\baaru:buffered_cmd\baaru:cur_cmd
  \def\baaru:pre_cell_hook{%
    \baaru:pre_unglossed_cell_hook
    \baaru:coldata::shrinkgap{#1}%
  }%
  \def\baaru:post_cell_hook{%
    \baaru:coldata::shrinkgap{#1}%
  }%
  \::baaru::if_copydelims{%
    \def\baaru:auto_content{%
      \::baaru::delim{#2}%
    }%
  }{}%
  \baaru:scan
}
\begingroup
\catcode`|=4
\@firstofone{%
  \endgroup
  \def\baarupipedelim{%
    \@ifnextchar|\baaru:double_pipe\baaru:single_pipe
  }%
}
\def\baaru:single_pipe{\baarudelim{|}}
\def\baaru:double_pipe{\baarudelim{||}}
\let\baaru:init_abbrev_seps\@empty
\let\baaru:reset_abbrev_seps\@empty
\def\::baaru::abbrevsepstyle{\textup}
\def\::baaru::abbrevstyle{\textup}
\def\setbaaruabbrevseps#1{%
  \let\baaru:init_abbrev_seps\@empty
  \let\baaru:reset_abbrev_seps\@empty
  \baaru:set_abbrev_seps#1\:delim
}%
\let\::baaru:set::abbrevseps\setbaaruabbrevseps
\def\baaru:set_abbrev_seps#1#2\:delim{%
  \ifdef\baaru:tokens_to_cache{%
    \appto\baaru:tokens_to_cache{\baaru:cache_char#1}%
  }{%
    \baaru:cache_char#1%
  }%
  \edef\baaru:init_abbrev_seps{%
    \expandonce\baaru:init_abbrev_seps
    \catcode`#1=4\relax
  }%
  \letcs\:temp{::baaru::#1.catcode}%
  \edef\baaru:reset_abbrev_seps{%
    \expandonce\baaru:reset_abbrev_seps
    \catcode`#1=\expandafter\noexpand\csname ::baaru::#1.catcode\endcsname\relax
  }%
  \cslet{::baaru::#1.catcode}\:temp
  \ifblank{#2}{}{%
    \baaru:set_abbrev_seps#2\:delim
  }%
}
\setbaaruabbrevseps{.:-()}
\def\setbaarupersonabbrev#1#2{%
  \csdef{::baaru::#1.person}{#2}%
}
\def\killbaarupersonabbrev#1{%
  \csundef{::baaru::#1.person}%
}
\def\setbaarunumberabbrev#1#2{%
  \csdef{::baaru::#1.number}{#2}%
}
\def\killbaarunumberabbrev#1{%
  \csundef{::baaru::#1.number}%
}
\def\setbaaruabbrev#1#2{%
  \csdef{::baaru::#1.abbrev}{#2}%
}
\def\killbaaruabbrev#1{%
  \csundef{::baaru::#1.abbrev}%
}
\baaru:if_stdabbrevs{%
  \baaru:if_leipzig{%
    \setbaarupersonabbrev{1}{\First}
    \setbaarupersonabbrev{1+2}{\Incl}
    \setbaarupersonabbrev{1+3}{\Excl}
    \setbaarupersonabbrev{2}{\Second}
    \setbaarupersonabbrev{3}{\Third}
    \setbaarunumberabbrev{s}{\Sing}
    \setbaarunumberabbrev{d}{\Dual}
    \setbaarunumberabbrev{du}{\Dual}
    \setbaarunumberabbrev{p}{\Plural}
    \setbaarunumberabbrev{pl}{\Plural}
    \setbaaruabbrev{S}{\Subj}
    \setbaaruabbrev{O}{\Obj}
  }{%
    \setbaarupersonabbrev{1}{\FIRST}
    \setbaarupersonabbrev{1+2}{\INCL}
    \setbaarupersonabbrev{1+3}{\EXCL}
    \setbaarupersonabbrev{2}{\SECOND}
    \setbaarupersonabbrev{3}{\THIRD}
    \setbaarunumberabbrev{s}{\SING}
    \setbaarunumberabbrev{d}{\DUAL}
    \setbaarunumberabbrev{du}{\DUAL}
    \setbaarunumberabbrev{p}{\PLURAL}
    \setbaarunumberabbrev{pl}{\PLURAL}
    \setbaaruabbrev{S}{\SUBJ}
    \setbaaruabbrev{O}{\OBJ}
  }%
}{}%
\def\baaru:if_is_cs#1{%
  \expandafter\baaru:if_is_cs@\string#1\:delim
}
\def\baaru:if_is_cs@#1#2\:delim{%
  \ifnum\catcode`#1=\z@
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
\def\baaru:parse_abbrevs#1{%
  \baaru:curY#1\relax
  \baaru:curX\z@
  \let\:protect\protect
  \let\protect\noexpand
  \loop\ifnum\baaru:curX<\baaru:ncols
    \baaru:init_coldata_id@nocheck
    \ifcsdef{baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id}{%
      \baaru:coldata::if_autocell{}{%
        \expandafter\baaru:parse_abbrevs@\csname baaru:cell::\the\baaru:curY @\baaru:cur_coldata_id\endcsname
      }%
      \advance\baaru:curX\@ne
    }{%
      \ifcsdef{baaru:multicol_cell::id:\the\baaru:curY @\baaru:cur_coldata_id}{%
        \baaru:counta\csname baaru:multicol_cell::id:\the\baaru:curY @\baaru:cur_coldata_id\endcsname\relax
        \expandafter\baaru:parse_abbrevs@\csname baaru:multicol_cell::\the\baaru:counta\endcsname
        \advance\baaru:curX\csname baaru:multicol_cell::span@\the\baaru:counta\endcsname
      }{%
        \advance\baaru:curX\@ne
      }%
    }%
  \repeat
  \let\protect\:protect
}
\def\baaru:parse_abbrevs@#1{%
  \expandafter\baaru:parse_abbrevs@@#1\baaruendscan\:delim#1%
}
\def\baaru:parse_abbrevs@@#1\:delim#2{%
  \baaru:buffer={}%
  \baaru:abbr:scan_init
  \baaru:init_abbrev_seps
  \expandafter\baaru:abbr:scan\scantokens{#1}%
  \baaru:reset_abbrev_seps
  \edef#2{%
    \the\baaru:buffer
  }%
}
\def\baaru:abbr:scan_init{%
  \let\baaru:abbr:person_cache\@empty
  \let\baaru:abbr:number_cache\@empty
  \let\baaru:abbr:other_cache\@empty
  \baaru:counta\z@
}
\def\baaru:abbr:scan{%
  \futurelet\:token\baaru:abbr:scan@
}
\def\baaru:abbr:scan@{%
  \ifx\:token\@sptoken
    \let\:next\baaru:abbr:scan_space
  \else\if\baaruendscan\:token
    \let\:next\baaru:abbr:scan_done
  \else\ifcat\noexpand\:token&%
    \let\:next\baaru:abbr:scan_sep
  \else\ifx\:token\bgroup
    \let\:next\baaru:abbr:scan_group
  \else
    \let\:next\baaru:abbr:scan_other
  \fi\fi\fi\fi
  \:next
}
\csdef{baaru:abbr:scan_space} {%
  \baaru:abbr:commit_word
  \baaru:buffer=\expandafter{\the\baaru:buffer\space}%
  \baaru:abbr:scan
}
\def\baaru:abbr:scan_sep#1{%
  \baaru:abbr:commit_word
  \baaru:buffer=\expandafter{\the\baaru:buffer{{\::baaru::abbrevsepstyle{\string#1}}}}%
  \baaru:abbr:scan
}
\def\baaru:abbr:scan_group{%
  \baaru:abbr:commit_word
  \baaru:reset_abbrev_seps
  \baaru:abbr:scan_group@
}%
\def\baaru:abbr:scan_group@#1{%
  \baaru:buffer=\expandafter{\the\baaru:buffer{#1}}%
  \baaru:init_abbrev_seps
  \baaru:abbr:scan_init
  \baaru:abbr:scan
}
\def\baaru:abbr:scan_done#1{%
  \baaru:abbr:commit_word
}
\def\baaru:abbr:scan_other#1{%
  \baaru:if_is_cs{#1}{%
    \baaru:abbr:commit_word
    \baaru:buffer=\expandafter{\the\baaru:buffer #1}%
  }{%
    \ifcase\baaru:counta
      % 0, initial state
      \baaru:if_nonalph{#1}{%
        \def\baaru:abbr:person_cache{#1}%
        \baaru:counta\@ne
      }{%
        \def\baaru:abbr:other_cache{#1}%
        \baaru:if_upper{#1}{%
          \baaru:counta3\relax
        }{%
          \baaru:counta4\relax
        }%
      }%
    \or % 1, after nonalph
      \baaru:if_nonalph{#1}{%
        \expandafter\def\expandafter\baaru:abbr:person_cache\expandafter{\baaru:abbr:person_cache#1}%
      }{%
        \baaru:if_upper{#1}{%
          \def\baaru:abbr:other_cache{#1}%
          \baaru:counta3\relax
        }{%
          \def\baaru:abbr:number_cache{#1}%
          \baaru:counta\tw@
        }%
      }%
    \or % 2, after lowercase, still ok
      \baaru:if_lower{#1}{%
        \expandafter\def\expandafter\baaru:abbr:number_cache\expandafter{\baaru:abbr:number_cache#1}%
      }{%
        \def\baaru:abbr:other_cache{#1}%
        \baaru:if_upper{#1}{%
          \baaru:counta3\relax
        }{%
          \baaru:counta4\relax
        }%
      }%
    \or % 3, after uppercase, still ok
      \expandafter\def\expandafter\baaru:abbr:other_cache\expandafter{\baaru:abbr:other_cache#1}%
      \baaru:if_upper{#1}{}{%
        \baaru:counta4\relax
      }%
    \or % 4, not an abbrev sequence
      \expandafter\def\expandafter\baaru:abbr:other_cache\expandafter{\baaru:abbr:other_cache#1}%
    \fi
  }%
  \baaru:abbr:scan
}
\def\baaru:abbr:commit_word{%
  \let\@tempa\@empty
  \let\baaru:if\@secondoftwo
  \ifnum\baaru:counta=4\relax\else
    \baaru:abbr:if_cache_person{%
      \baaru:abbr:if_cache_number{%
        \baaru:abbr:cache_abbrev
        \let\baaru:if\@firstoftwo
      }{}%
    }{}%
  \fi
  \baaru:if{}{%
    \edef\@tempa{%
      \expandonce\baaru:abbr:person_cache
      \expandonce\baaru:abbr:number_cache
      \expandonce\baaru:abbr:other_cache
    }%
  }%
  \edef\:next{%
    \noexpand\baaru:buffer={%
      \the\baaru:buffer
      \expandonce\@tempa
    }%
  }%
  \:next
  \baaru:abbr:scan_init
}
\def\baaru:abbr:if_cache_person{%
  \ifx\baaru:abbr:person_cache\@empty
    \expandafter\@firstoftwo
  \else
    \ifcsdef{::baaru::\baaru:abbr:person_cache .person}{%
      \edef\@tempa{%
        \expandonce\@tempa
        \noexpand\::baaru::abbrevstyle{%
          \expandafter\expandonce\csname
          ::baaru::\baaru:abbr:person_cache .person\endcsname
        }%
      }%
      \expandafter\@firstoftwo
    }{%
      \expandafter\@secondoftwo
    }%
  \fi
}
\def\baaru:abbr:if_cache_number{%
  \ifx\baaru:abbr:number_cache\@empty
    \expandafter\@firstoftwo
  \else
    \ifcsdef{::baaru::\baaru:abbr:number_cache .number}{%
      \edef\@tempa{%
        \noexpand\::baaru::abbrevstyle{%
          \expandonce\@tempa
          \expandafter\expandonce\csname
          ::baaru::\baaru:abbr:number_cache .number\endcsname
        }%
      }%
      \expandafter\@firstoftwo
    }{%
      \expandafter\@secondoftwo
    }%
  \fi
}
\def\baaru:abbr:cache_abbrev{%
  \ifx\baaru:abbr:other_cache\@empty\else
    \begingroup
      \ifcsdef{::baaru::\baaru:abbr:other_cache .abbrev}{%
        \edef\@tempb{%
          \expandafter\expandonce\csname ::baaru::\baaru:abbr:other_cache .abbrev\endcsname
        }%
      }{%
        \baaru:if_leipzig{%
          \expandafter\baaru:make_leipzig_abbrev\baaru:abbr:other_cache\:delim
        }{%
          \edef\@tempb{%
            \expandafter\noexpand\csname \baaru:abbr:other_cache\endcsname
          }%
        }%
      }%
      \xdef\:next{%
        \def\noexpand\@tempa{%
          \noexpand\::baaru::abbrevstyle{%
            \expandonce\@tempa\expandonce\@tempb
          }%
        }%
      }%
      \aftergroup\:next
    \endgroup
  \fi
}
\def\baaru:if_upper#1{%
  \ifnum`#1=\uccode`#1\relax
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
\def\baaru:if_lower#1{%
  \ifnum`#1=\lccode`#1\relax
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
\def\baaru:if_nonalph#1{%
  \ifnum\lccode`#1=\z@
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
\def\baaru:make_leipzig_abbrev#1#2\:delim{%
  \lowercase{%
    \def\:temp{#2}%
  }%
  \edef\@tempb{\expandafter\noexpand\csname#1\:temp\endcsname}%
}

\def\baarudquote#1{``#1''}
\def\baarusquote#1{`#1'}
\def\baaruparens#1{(#1)}
\def\baaruul#1{%
  \def\temp{#1}%
  \ul\temp
}
\def\newbaarucolstyle{%
  \@ifstar{%
    \let\baaru:if_starred\@firstoftwo
    \baaru:counta\z@
    \baaru:new_colstyle
  }{%
    \let\baaru:if_starred\@secondoftwo
    \baaru:counta\m@ne
    \baaru:new_colstyle
  }%
}
\def\baaru:new_colstyle#1#2{%
  \def\do##1{%
    \csdef{baaru:colstyle::#1@\the\baaru:counta}{%
      ##1%
    }%
    \advance\baaru:counta\@ne
  }%
  \forcsvlist\do{#2}%
  \ifnum\baaru:counta<\@ne
    \BaaruError{No styles defined for colstyle `#1'}\@eha
  \else
    \baaru:countb\baaru:counta
    \advance\baaru:countb\m@ne % the highest allowed number
    \csedef{#1}{%
      \baaru:if_starred{%
        \@tempcnta\baaru:curX
      }{%
        \noexpand\baaru:init_coldata_id@nocheck
        \@tempcnta\noexpand\baaru:coldata::rank\relax
      }%
      \noexpand\loop\noexpand\ifnum\@tempcnta>\the\baaru:countb\relax
        \advance\@tempcnta-\the\baaru:counta
      \noexpand\repeat
      \noexpand\csname baaru:colstyle::#1@\noexpand\the\@tempcnta\endcsname
    }%
  \fi
}
\def\newbaarustyle#1#2#3{%
  \ifcsdef{baaru:init_style::#1}{%
    \BaaruError{A style tagged `#1' has already been defined}\@eha
  }{%
    \csdef{baaru:init_style::#1}{#3}%
    \cslet{baaru:lines@#1}\@empty
    \csdef{baaru:preamblepar@#1}{preamble}%
    \csdef{baaru:glosspar@#1}{gloss}%
    \csdef{baaru:activate::env@#1}{%
      \let\ex\baaruex
    }%
    \csdef{baaru:activate::scan@#1}{%
      \let\begin\:baaru:\let\end\:baaru:\let\ex\:baaru:
    }%
    \letcs\:tempa{::baaru::begin.orig}%
    \letcs\:tempb{::baaru::end.orig}%
    \letcs\:tempc{::baaru::ex.orig}%
    \letcs\:tempd{::baaru:: .orig}%
    \csedef{baaru:deactivate::scan@#1}{%
      \let\noexpand\begin\expandafter\noexpand\csname ::baaru::begin.orig\endcsname
        \let\noexpand\end\expandafter\noexpand\csname ::baaru::end.orig\endcsname
      \let\noexpand\ex\expandafter\noexpand\csname ::baaru::ex.orig\endcsname
      \let\noexpand\ \expandafter\noexpand\csname ::baaru:: .orig\endcsname
    }%
    \cslet{::baaru::begin.orig}\:tempa
    \cslet{::baaru::end.orig}\:tempb
    \cslet{::baaru::ex.orig}\:tempc
    \cslet{::baaru:: .orig}\:tempd
    \cslet{baaru:activate::aligned@#1}\@empty
    \cslet{baaru:deactivate::aligned@#1}\@empty
    \csdef{baaru:defined::\string\ex @#1}{x}%
    \csdef{baaru:defined::\string\begin @#1}{x}%
      \csdef{baaru:defined::\string\end @#1}{x}%
    \csdef{baaru:defined::&@#1}{x}%
    \csdef{baaru:defined::\string\ @#1}{x}%
    \let\:cached_style\baaru:cur_style
    \def\baaru:cur_style{#1}%
    #2%
    \let\baaru:cur_style\:cached_style
  }%
}%
\def\updatebaarustyle#1#2#3{%
  \ifcsdef{baaru:init_style::#1}{%
    \csedef{baaru:init_style::#1}{%
      \expandafter\expandonce\csname baaru:init_style::#1\endcsname
      \unexpanded{#3}%
    }%
    \let\:cached_style\baaru:cur_style
    \def\baaru:cur_style{#1}%
    #2%
    \ifx\baaru:cur_style\:cached_style
      #3%
    \else
      \let\baaru:cur_style\:cached_style
    \fi
  }{%
    \BaaruError{There is no style tagged `#1'}\@eha
  }%
}
\def\setbaarustyle#1{%
  \ifcsdef{baaru:init_style::#1}{%
    \def\:temp{#1}%
    \ifx\:temp\baaru:cur_style\else
      \def\baaru:cur_style{#1}%
    \fi
    \csname baaru:init_style::#1\endcsname
  }{%
    \BaaruError{Unknown baaru style `#1'}\@eha
  }%
}
\def\::baaru:set::style#1{%
  \setbaarustyle{#1}%
}
\def\newbaaruenvironments#1#2#3#4{%
  \newenvironment{#2}{%
    \setbaarustyle{#1}%
    \examples
  }{%
    \endexamples
  }%
  \newenvironment{#3}{%
    \setbaarustyle{#1}%
    \example
  }{%
    \endexample
  }%
  \newenvironment{#4}{%
    \setbaarustyle{#1}%
    \subexamples
  }{%
    \endsubexamples
  }%
}
\csdef{::baaru::linelabel}#1{%
  \textit{#1}: % space
}
\def\::baaru::contextname{Context}%
\def\::baaru::altname{Or}%
\def\::baaru::intendedname{Intended}%
\def\::baaru::notname{Not}%
\def\baaru:setup_lines#1#2{%
  \newbaarulinetype{tr}{tr}{\baarudquote}%
  \baaru:if_meta{%
    \newbaarulinetype{preamble}{preamble}{}%
    \newbaarulinetype{script}{script}{\textbf}%
    \newbaarulinetype{context}{context}{\baaruuse{linelabel}{\baaruuse{contextname}}}%
    \newbaarulinetype{rightcomment}{lect}{}%
    \newbaarulinetype{citation}{source}{\baaruparens}%
  }{}%
  \baaru:if_alttr{%
    \newbaarulinetype{tr}{alt}{\baaruuse{linelabel}{\baaruuse{altname}}\baaruuse{tr.markup}}%
    \newbaarulinetype{tr}{intended}{\baaruuse{linelabel}{\baaruuse{intendedname}}\baaruuse{tr.markup}}%
    \newbaarulinetype{tr}{not}{\baaruuse{linelabel}{\baaruuse{notname}}\baaruuse{tr.markup}}%
  }{}%
  \baaru:if_abbrevs{%
    \enablebaaruabbrevs{#2}%
  }{}%
}%
\def\baaru:setup_style::aligned{%
  \newbaarustyle{aligned}{%
    \newbaarulinetype{aligned}{words}{\textbf}%
    \newbaarulinetype{aligned}{bits}{}%
    \newbaarulinetype{aligned}{gloss}{\textit}%
    \baaru:setup_lines\@secondoftwo{gloss}%
    \baaru:if_glosscmds{%
      \newbaarucmd[bits]{[}{\baaruopenbracket[}%
      \newbaarucmd[bits]{]}{\baaruclosebracket]}%
      \baaru:if_junctures{%
        \newbaarucmd[bits]{=}{\baarujuncture{\texttt{=}}}%
        \newbaarucmd[bits]{-}{\baarujuncture-}%
      }{}%
      \newbaarucmd{##}{\baarugetpos}%
      \newbaarucmd{\MC}{\baarumulticol}%
      \newbaarucmd{\\}{\baaruwrap}%
      \newbaarucmd{\contd}{\baarucontd}%
      \baaru:if_extra_glosscmds{%
        \newbaarucmd{\UL}{\baaruunderline}%
        \newbaarucmd{\SO}{\baarustrikeout}%
        \newbaarucmd{\BOX}{\baarubox}%
        \newbaarucmd{\t}{\baaruemptyelement{t}}%
      }{}%
    }{}%
  }{%
    \baaruset{%
      cellspacing=1em,
      copyjunctures,
      noexplicitcells%
    }%
  }%
}%
\csdef{baaru:setup_style::2level}{%
  \newbaarustyle{2level}{%
    \newbaarulinetype{nlevel}{gloss}{,\textit}%
    \baaru:setup_lines\@firstoftwo{glossb}%
    \baaru:if_glosscmds{%
      \baarudefforrow{0}{%
        \newbaarucmd[glossa]{[}{\baaruopenbracket[}%
        \newbaarucmd[glossa]{]}{\baaruclosebracket]}%
        \baaru:if_junctures{%
          \newbaarucmd[glossa]{=}{\baarujuncture{\texttt{=}}}%
          \newbaarucmd[glossa]{-}{\baarujuncture-}%
        }{}%
        \baaru:if_extra_glosscmds{%
          \newbaarucmd{\t}{\baaruemptyelement{t}}%
        }{}%
      }%
      \newbaarucmd{##}{\baarugetpos}%
      \newbaarucmd{\MC}{\baarumulticol}%
      \newbaarucmd{\\}{\baaruendcol}%
      \baaru:if_extra_glosscmds{%
        \newbaarucmd{\UL}{\baaruunderline}%
        \newbaarucmd{\SO}{\baarustrikeout}%
        \newbaarucmd{\BOX}{\baarubox}%
      }{}%
    }{}%
  }{%
    \baaruset{%
      cellspacing=1em,
      copyjunctures,
      explicitcells%
    }%
  }%
}%
\csdef{baaru:setup_style::3level}{%
  \newbaarustyle{3level}{%
    \newbaarulinetype{nlevel}{gloss}{\textbf,,\textit}%
    \baaru:setup_lines\@firstoftwo{glossc}%
    \baaru:if_glosscmds{%
      \baarudefforrow{1}{%
        \newbaarucmd[glossa,glossb]{[}{\baaruopenbracket[}%
        \newbaarucmd[glossa,glossb]{]}{\baaruclosebracket]}%
        \baaru:if_junctures{%
          \newbaarucmd[glossa,glossb]{=}{\baarujuncture{\texttt{=}}}%
          \newbaarucmd[glossa,glossb]{-}{\baarujuncture-}%
        }{}%
        \baaru:if_extra_glosscmds{%
          \newbaarucmd[glossa]{\t}{\baaruemptyelement{t}}%
        }{}%
      }%
      \newbaarucmd{##}{\baarugetpos}%
      \newbaarucmd{\MC}{\baarumulticol}%
      \newbaarucmd{\\}{\baaruendcol}%
      \baaru:if_extra_glosscmds{%
        \newbaarucmd{\UL}{\baaruunderline}%
        \newbaarucmd{\SO}{\baarustrikeout}%
        \newbaarucmd{\BOX}{\baarubox}%
      }{}%
    }{}%
  }{%
    \baaruset{%
      cellspacing=1em,
      copyjunctures,
      explicitcells%
    }%
  }%
}%
\def\baaru:setup_style#1{%
  \csname baaru:setup_style::#1\expandafter\endcsname
  \ifdef\baaru:cur_style{}{%
    \setbaarustyle{#1}%
  }%
}%
\ifx\baaru:auto_styles\@empty
  \newbaarustyle{}{}{}
  \setbaarustyle{}
\else
  \forlistloop\baaru:setup_style\baaru:auto_styles
\fi
\def\baaru:ensure_tikz_loaded{%
  \@ifpackageloaded{tikz}{}{%
    \RequirePackage{tikz}%
  }%
}
\def\baaru:maybe_tikz_style{%
  \@ifpackageloaded{tikz}{%
    \tikzset{%
      baaru/.style={},%
      baarucontour/.style={rounded corners=0.3ex}%
    }%
  }{}%
}
\baaru:if_contours{%
  \newbaarustyle{contour}{%
    \AtBeginDocument{\baaru:ensure_tikz_loaded}%
    \newbaarulinetype{aligned}{text}{}%
    \newbaarulinetype{tr}{tr}{\baarudquote}%
    \baaru:if_meta{%
      \newbaarulinetype{preamble}{preamble}{}%
      \newbaarulinetype{script}{script}{\textbf}%
      \newbaarulinetype{context}{context}{\baaruuse{linelabel}{\baaruuse{contextname}}}%
      \newbaarulinetype{rightcomment}{lect}{}%
      \newbaarulinetype{citation}{source}{\baaruparens}%
    }{}%
    \baaru:if_alttr{%
      \newbaarulinetype{tr}{alt}{\baaruuse{linelabel}{\baaruuse{altname}}\baaruuse{tr.markup}}%
      \newbaarulinetype{tr}{intended}{\baaruuse{linelabel}{\baaruuse{intendedname}}\baaruuse{tr.markup}}%
      \newbaarulinetype{tr}{not}{\baaruuse{linelabel}{\baaruuse{notname}}\baaruuse{tr.markup}}%
    }{}%
    \newbaarucmd{<>}{\baarudatapt\baarudrawcontour{#1}}
  }{%
    \baaruplainspacing
    \nobaaruexplicitcells
  }%
  \newbaaruenvironments{contour}{contours}{contour}{subcontours}
}{}
\AtBeginDocument{\baaru:maybe_tikz_style}
\def\baarucolwidths{%
  \@ifstar\baaru:colwidths@\baaru:colwidths
}
\def\baaru:colwidths@{%
  \expandafter\baaru:colwidths\expandafter{\::baaru::mincolwidths}%
}
\def\baaru:colwidths#1{%
  \baaru:cached_curX\baaru:curX
  \baaru:curX\z@
  \def\:do##1{%
    \ifblank{##1}{}{%
      \baaru:init_coldata_id
      \ifdim\baaru:coldata::wd<##1\relax
        \baaru:coldata::wd=##1\relax
      \fi
    }%
    \advance\baaru:curX\@ne
  }%
  \baaru:foreach\:do{#1}%
  \baaru:curX\baaru:cached_curX
}
\newbaaruparam{mincolwidths}{2cm}%
\baaru:if_columns{%
  \let\baarucolumnstyle\relax
  \newbaarustyle{columns}{%
    \newbaarulinetype{aligned}{cols}{\baarucolumnstyle}%
    \addbaaruhook{everygloss}{\baarucolwidths*}%
    \baaru:if_meta{%
      \newbaarulinetype{preamble}{preamble}{}%
      \newbaarulinetype{rightcomment}{lect}{}%
      \newbaarulinetype{citation}{source}{\baaruparens}%
    }{}%
  }{%
    \baaruexplicitcells
  }%
  \newbaaruenvironments{columns}{columnses}{columns}{subcolumns}%
}{}%
\endinput
%%
%% End of file `baarux.sty'.
